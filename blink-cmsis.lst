
blink-cmsis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004710  080001d0  080001d0  000081d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         0000002c  20000000  080048e0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000000c  2000002c  0800490c  0001002c  2**2
                  ALLOC
  4 ._user_heap_stack 00000080  20000038  08004918  0001002c  2**0
                  ALLOC
  5 .ARM.attributes 0000002f  00000000  00000000  0001002c  2**0
                  CONTENTS, READONLY
  6 .comment      00000030  00000000  00000000  0001005b  2**0
                  CONTENTS, READONLY
  7 .debug_info   00005fb5  00000000  00000000  0001008b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000013b2  00000000  00000000  00016040  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000940  00000000  00000000  000173f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000850  00000000  00000000  00017d32  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002685  00000000  00000000  00018582  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000024cb  00000000  00000000  0001ac07  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001c54  00000000  00000000  0001d0d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <Reset_Handler-0x14>:
 80001d0:	080048e0 	.word	0x080048e0
 80001d4:	20000000 	.word	0x20000000
 80001d8:	2000002c 	.word	0x2000002c
 80001dc:	2000002c 	.word	0x2000002c
 80001e0:	20000038 	.word	0x20000038

080001e4 <Reset_Handler>:
 80001e4:	2100      	movs	r1, #0
 80001e6:	e003      	b.n	80001f0 <LoopCopyDataInit>

080001e8 <CopyDataInit>:
 80001e8:	4b0a      	ldr	r3, [pc, #40]	; (8000214 <LoopFillZerobss+0x10>)
 80001ea:	585b      	ldr	r3, [r3, r1]
 80001ec:	5043      	str	r3, [r0, r1]
 80001ee:	3104      	adds	r1, #4

080001f0 <LoopCopyDataInit>:
 80001f0:	4809      	ldr	r0, [pc, #36]	; (8000218 <LoopFillZerobss+0x14>)
 80001f2:	4b0a      	ldr	r3, [pc, #40]	; (800021c <LoopFillZerobss+0x18>)
 80001f4:	1842      	adds	r2, r0, r1
 80001f6:	429a      	cmp	r2, r3
 80001f8:	d3f6      	bcc.n	80001e8 <CopyDataInit>
 80001fa:	4a09      	ldr	r2, [pc, #36]	; (8000220 <LoopFillZerobss+0x1c>)
 80001fc:	e002      	b.n	8000204 <LoopFillZerobss>

080001fe <FillZerobss>:
 80001fe:	2300      	movs	r3, #0
 8000200:	f842 3b04 	str.w	r3, [r2], #4

08000204 <LoopFillZerobss>:
 8000204:	4b07      	ldr	r3, [pc, #28]	; (8000224 <LoopFillZerobss+0x20>)
 8000206:	429a      	cmp	r2, r3
 8000208:	d3f9      	bcc.n	80001fe <FillZerobss>
 800020a:	f000 fcdd 	bl	8000bc8 <SystemInit>
 800020e:	f000 fa37 	bl	8000680 <main>
 8000212:	4770      	bx	lr
 8000214:	080048e0 	.word	0x080048e0
 8000218:	20000000 	.word	0x20000000
 800021c:	2000002c 	.word	0x2000002c
 8000220:	2000002c 	.word	0x2000002c
 8000224:	20000038 	.word	0x20000038

08000228 <ADC1_IRQHandler>:
 8000228:	e7fe      	b.n	8000228 <ADC1_IRQHandler>
	...

0800022c <setup_interrupt>:
bool acquiring = false;
int thecount = 0;
bool ready = true;

void setup_interrupt()
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStructure;
    NVIC_InitStructure.NVIC_IRQChannel = EXTI9_5_IRQn;
 8000232:	2317      	movs	r3, #23
 8000234:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8000236:	230f      	movs	r3, #15
 8000238:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 800023a:	2301      	movs	r3, #1
 800023c:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800023e:	2301      	movs	r3, #1
 8000240:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	4618      	mov	r0, r3
 8000246:	f000 fe6b 	bl	8000f20 <NVIC_Init>
}
 800024a:	3708      	adds	r7, #8
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}

08000250 <delay>:

void delay(int count)
{
 8000250:	b480      	push	{r7}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
    while(count--){};
 8000258:	bf00      	nop
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	1e5a      	subs	r2, r3, #1
 800025e:	607a      	str	r2, [r7, #4]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d1fa      	bne.n	800025a <delay+0xa>
}
 8000264:	370c      	adds	r7, #12
 8000266:	46bd      	mov	sp, r7
 8000268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <am2302_init>:

void am2302_init()
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
    setup_interrupt();
 8000274:	f7ff ffda 	bl	800022c <setup_interrupt>
}
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop

0800027c <am2302_acquire>:

void am2302_acquire(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b082      	sub	sp, #8
 8000280:	af00      	add	r7, sp, #0
    if(ready)
 8000282:	f240 0300 	movw	r3, #0
 8000286:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	2b00      	cmp	r3, #0
 800028e:	f000 808a 	beq.w	80003a6 <am2302_acquire+0x12a>
    {
        ready = false;
 8000292:	f240 0300 	movw	r3, #0
 8000296:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800029a:	2200      	movs	r2, #0
 800029c:	701a      	strb	r2, [r3, #0]
        acquiring = false;
 800029e:	f240 032c 	movw	r3, #44	; 0x2c
 80002a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80002a6:	2200      	movs	r2, #0
 80002a8:	701a      	strb	r2, [r3, #0]
        GPIO_WriteBit(GPIOC, GPIO_Pin_8, 1);
 80002aa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80002ae:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80002b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002b6:	2201      	movs	r2, #1
 80002b8:	f001 fda4 	bl	8001e04 <GPIO_WriteBit>
        
        GPIO_InitTypeDef GPIO_InitStructure;
        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 80002bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80002c0:	80bb      	strh	r3, [r7, #4]
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80002c2:	2310      	movs	r3, #16
 80002c4:	71fb      	strb	r3, [r7, #7]
        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 80002c6:	2301      	movs	r3, #1
 80002c8:	71bb      	strb	r3, [r7, #6]
        GPIO_Init(GPIOB, &GPIO_InitStructure);        
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80002d0:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80002d4:	4619      	mov	r1, r3
 80002d6:	f001 fc59 	bl	8001b8c <GPIO_Init>
       
        GPIO_WriteBit(GPIOB, GPIO_Pin_9, 1);
 80002da:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80002de:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80002e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002e6:	2201      	movs	r2, #1
 80002e8:	f001 fd8c 	bl	8001e04 <GPIO_WriteBit>
        delay(50000);
 80002ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80002f0:	f7ff ffae 	bl	8000250 <delay>
        GPIO_WriteBit(GPIOB, GPIO_Pin_9, 0);
 80002f4:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80002f8:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80002fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000300:	2200      	movs	r2, #0
 8000302:	f001 fd7f 	bl	8001e04 <GPIO_WriteBit>
        delay(25000);
 8000306:	f246 10a8 	movw	r0, #25000	; 0x61a8
 800030a:	f7ff ffa1 	bl	8000250 <delay>
        GPIO_WriteBit(GPIOB, GPIO_Pin_9, 1);
 800030e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8000312:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000316:	f44f 7100 	mov.w	r1, #512	; 0x200
 800031a:	2201      	movs	r2, #1
 800031c:	f001 fd72 	bl	8001e04 <GPIO_WriteBit>

        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 8000320:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000324:	80bb      	strh	r3, [r7, #4]
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000326:	2304      	movs	r3, #4
 8000328:	71fb      	strb	r3, [r7, #7]
        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 800032a:	2301      	movs	r3, #1
 800032c:	71bb      	strb	r3, [r7, #6]
        GPIO_Init(GPIOB, &GPIO_InitStructure);        
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8000334:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000338:	4619      	mov	r1, r3
 800033a:	f001 fc27 	bl	8001b8c <GPIO_Init>

        timer2_start();
 800033e:	f000 fa03 	bl	8000748 <timer2_start>
        while(!ready && (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_9) == 1)) { }
 8000342:	bf00      	nop
 8000344:	f240 0300 	movw	r3, #0
 8000348:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	f083 0301 	eor.w	r3, r3, #1
 8000352:	b2db      	uxtb	r3, r3
 8000354:	2b00      	cmp	r3, #0
 8000356:	d00a      	beq.n	800036e <am2302_acquire+0xf2>
 8000358:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800035c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000360:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000364:	f001 fce2 	bl	8001d2c <GPIO_ReadInputDataBit>
 8000368:	4603      	mov	r3, r0
 800036a:	2b01      	cmp	r3, #1
 800036c:	d0ea      	beq.n	8000344 <am2302_acquire+0xc8>
        while(!ready && (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_9) == 0)) { }
 800036e:	bf00      	nop
 8000370:	f240 0300 	movw	r3, #0
 8000374:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	f083 0301 	eor.w	r3, r3, #1
 800037e:	b2db      	uxtb	r3, r3
 8000380:	2b00      	cmp	r3, #0
 8000382:	d00a      	beq.n	800039a <am2302_acquire+0x11e>
 8000384:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8000388:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800038c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000390:	f001 fccc 	bl	8001d2c <GPIO_ReadInputDataBit>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d0ea      	beq.n	8000370 <am2302_acquire+0xf4>

        acquiring = true;
 800039a:	f240 032c 	movw	r3, #44	; 0x2c
 800039e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80003a2:	2201      	movs	r2, #1
 80003a4:	701a      	strb	r2, [r3, #0]
    }

    EXTI_ClearITPendingBit(EXTI_Line0);
 80003a6:	2001      	movs	r0, #1
 80003a8:	f001 ffb6 	bl	8002318 <EXTI_ClearITPendingBit>
}
 80003ac:	3708      	adds	r7, #8
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop

080003b4 <am2302_interrupt_handler>:

void am2302_interrupt_handler(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
    if(acquiring)
 80003b8:	f240 032c 	movw	r3, #44	; 0x2c
 80003bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d00a      	beq.n	80003dc <am2302_interrupt_handler+0x28>
    { 
        thecount++;
 80003c6:	f240 0330 	movw	r3, #48	; 0x30
 80003ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	1c5a      	adds	r2, r3, #1
 80003d2:	f240 0330 	movw	r3, #48	; 0x30
 80003d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80003da:	601a      	str	r2, [r3, #0]
	}
}
 80003dc:	46bd      	mov	sp, r7
 80003de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e2:	4770      	bx	lr

080003e4 <am2302_finished>:

void am2302_finished(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
    if(!acquiring)
 80003e8:	f240 032c 	movw	r3, #44	; 0x2c
 80003ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	f083 0301 	eor.w	r3, r3, #1
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d000      	beq.n	80003fe <am2302_finished+0x1a>
        return;
 80003fc:	e03a      	b.n	8000474 <am2302_finished+0x90>
    TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 80003fe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000402:	2101      	movs	r1, #1
 8000404:	f003 fcbe 	bl	8003d84 <TIM_ClearITPendingBit>
    GPIO_WriteBit(GPIOC, GPIO_Pin_8, 0);
 8000408:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800040c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000410:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000414:	2200      	movs	r2, #0
 8000416:	f001 fcf5 	bl	8001e04 <GPIO_WriteBit>
    TIM_Cmd(TIM2, DISABLE);
 800041a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800041e:	2100      	movs	r1, #0
 8000420:	f002 fc92 	bl	8002d48 <TIM_Cmd>
    delay(500000);
 8000424:	f24a 1020 	movw	r0, #41248	; 0xa120
 8000428:	f2c0 0007 	movt	r0, #7
 800042c:	f7ff ff10 	bl	8000250 <delay>
    acquiring = false;
 8000430:	f240 032c 	movw	r3, #44	; 0x2c
 8000434:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000438:	2200      	movs	r2, #0
 800043a:	701a      	strb	r2, [r3, #0]
    ready = true;
 800043c:	f240 0300 	movw	r3, #0
 8000440:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000444:	2201      	movs	r2, #1
 8000446:	701a      	strb	r2, [r3, #0]
    while(thecount) {
 8000448:	e00d      	b.n	8000466 <am2302_finished+0x82>
        usart_putc('X');
 800044a:	2058      	movs	r0, #88	; 0x58
 800044c:	f000 f9ba 	bl	80007c4 <usart_putc>
        thecount--;
 8000450:	f240 0330 	movw	r3, #48	; 0x30
 8000454:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	1e5a      	subs	r2, r3, #1
 800045c:	f240 0330 	movw	r3, #48	; 0x30
 8000460:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000464:	601a      	str	r2, [r3, #0]
    GPIO_WriteBit(GPIOC, GPIO_Pin_8, 0);
    TIM_Cmd(TIM2, DISABLE);
    delay(500000);
    acquiring = false;
    ready = true;
    while(thecount) {
 8000466:	f240 0330 	movw	r3, #48	; 0x30
 800046a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d1ea      	bne.n	800044a <am2302_finished+0x66>
        usart_putc('X');
        thecount--;
    }
}
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop

08000478 <setup_interrupt_line>:
#include "button.h"

static bool depressed = false;

static void setup_interrupt_line()
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
	EXTI_InitTypeDef EXTI_InitStructure;
	EXTI_InitStructure.EXTI_Line = EXTI_Line0;
 800047e:	2301      	movs	r3, #1
 8000480:	603b      	str	r3, [r7, #0]
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8000482:	2300      	movs	r3, #0
 8000484:	713b      	strb	r3, [r7, #4]
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 8000486:	2308      	movs	r3, #8
 8000488:	717b      	strb	r3, [r7, #5]
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 800048a:	2301      	movs	r3, #1
 800048c:	71bb      	strb	r3, [r7, #6]
	EXTI_Init(&EXTI_InitStructure);
 800048e:	463b      	mov	r3, r7
 8000490:	4618      	mov	r0, r3
 8000492:	f001 fe2b 	bl	80020ec <EXTI_Init>

    EXTI_InitStructure.EXTI_Line = EXTI_Line9;
 8000496:	f44f 7300 	mov.w	r3, #512	; 0x200
 800049a:	603b      	str	r3, [r7, #0]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 800049c:	2300      	movs	r3, #0
 800049e:	713b      	strb	r3, [r7, #4]
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 80004a0:	2308      	movs	r3, #8
 80004a2:	717b      	strb	r3, [r7, #5]
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 80004a4:	2301      	movs	r3, #1
 80004a6:	71bb      	strb	r3, [r7, #6]
	EXTI_Init(&EXTI_InitStructure);
 80004a8:	463b      	mov	r3, r7
 80004aa:	4618      	mov	r0, r3
 80004ac:	f001 fe1e 	bl	80020ec <EXTI_Init>

	GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
 80004b0:	2000      	movs	r0, #0
 80004b2:	2100      	movs	r1, #0
 80004b4:	f001 fd9e 	bl	8001ff4 <GPIO_EXTILineConfig>
}
 80004b8:	3708      	adds	r7, #8
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop

080004c0 <setup_interrupt_controller>:

static void setup_interrupt_controller()
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStructure;
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
 80004c6:	2306      	movs	r3, #6
 80004c8:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 80004ca:	230f      	movs	r3, #15
 80004cc:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 80004ce:	230f      	movs	r3, #15
 80004d0:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80004d2:	2301      	movs	r3, #1
 80004d4:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
 80004d6:	1d3b      	adds	r3, r7, #4
 80004d8:	4618      	mov	r0, r3
 80004da:	f000 fd21 	bl	8000f20 <NVIC_Init>
}
 80004de:	3708      	adds	r7, #8
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}

080004e4 <button_init>:

void button_init()
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
    setup_interrupt_line();
 80004e8:	f7ff ffc6 	bl	8000478 <setup_interrupt_line>
    setup_interrupt_controller();
 80004ec:	f7ff ffe8 	bl	80004c0 <setup_interrupt_controller>
}
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop

080004f4 <button_interrupt_handler>:

void button_interrupt_handler()
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
    depressed = true;
 80004f8:	f240 0334 	movw	r3, #52	; 0x34
 80004fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000500:	2201      	movs	r2, #1
 8000502:	701a      	strb	r2, [r3, #0]
}
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr

0800050c <button_is_depressed>:

bool button_is_depressed()
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
    return depressed;
 8000510:	f240 0334 	movw	r3, #52	; 0x34
 8000514:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000518:	781b      	ldrb	r3, [r3, #0]
}
 800051a:	4618      	mov	r0, r3
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr

08000524 <NMI_Handler>:
#include "interrupts.h"
#include "usart.h"
#include "timer.h"
#include "button.h"

void NMI_Handler(void) { }
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr

08000530 <HardFault_Handler>:

void HardFault_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  while (1) { }
 8000534:	e7fe      	b.n	8000534 <HardFault_Handler+0x4>
 8000536:	bf00      	nop

08000538 <MemManage_Handler>:
}

void MemManage_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  while (1) { }
 800053c:	e7fe      	b.n	800053c <MemManage_Handler+0x4>
 800053e:	bf00      	nop

08000540 <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  while (1) { }
 8000544:	e7fe      	b.n	8000544 <BusFault_Handler+0x4>
 8000546:	bf00      	nop

08000548 <UsageFault_Handler>:
}

void UsageFault_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  while (1) { }
 800054c:	e7fe      	b.n	800054c <UsageFault_Handler+0x4>
 800054e:	bf00      	nop

08000550 <SVC_Handler>:
}

void SVC_Handler(void) { }
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr

0800055c <DebugMon_Handler>:

void DebugMon_Handler(void) { }
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr

08000568 <PendSV_Handler>:

void PendSV_Handler(void) { }
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr

08000574 <SysTick_Handler>:

void SysTick_Handler(void) { }
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr

08000580 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	if(EXTI_GetITStatus(EXTI_Line0) == RESET)
 8000584:	2001      	movs	r0, #1
 8000586:	f001 fe9f 	bl	80022c8 <EXTI_GetITStatus>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d100      	bne.n	8000592 <EXTI0_IRQHandler+0x12>
	    return;
 8000590:	e004      	b.n	800059c <EXTI0_IRQHandler+0x1c>
    button_interrupt_handler();
 8000592:	f7ff ffaf 	bl	80004f4 <button_interrupt_handler>
  	EXTI_ClearITPendingBit(EXTI_Line0);
 8000596:	2001      	movs	r0, #1
 8000598:	f001 febe 	bl	8002318 <EXTI_ClearITPendingBit>
}
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop

080005a0 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	if(EXTI_GetITStatus(EXTI_Line9) == RESET)
 80005a4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005a8:	f001 fe8e 	bl	80022c8 <EXTI_GetITStatus>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d100      	bne.n	80005b4 <EXTI9_5_IRQHandler+0x14>
	    return;
 80005b2:	e005      	b.n	80005c0 <EXTI9_5_IRQHandler+0x20>
    am2302_interrupt_handler();
 80005b4:	f7ff fefe 	bl	80003b4 <am2302_interrupt_handler>
  	EXTI_ClearITPendingBit(EXTI_Line9);
 80005b8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005bc:	f001 feac 	bl	8002318 <EXTI_ClearITPendingBit>
}
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop

080005c4 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
    if (TIM_GetITStatus(TIM2, TIM_IT_Update) == RESET)
 80005c8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80005cc:	2101      	movs	r1, #1
 80005ce:	f003 fbaf 	bl	8003d30 <TIM_GetITStatus>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d100      	bne.n	80005da <TIM2_IRQHandler+0x16>
        return;
 80005d8:	e006      	b.n	80005e8 <TIM2_IRQHandler+0x24>
    timer2_interrupt_handler();
 80005da:	f000 f8e7 	bl	80007ac <timer2_interrupt_handler>
    TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 80005de:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80005e2:	2101      	movs	r1, #1
 80005e4:	f003 fbce 	bl	8003d84 <TIM_ClearITPendingBit>
}
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop

080005ec <leds_init>:
#include "stm32f10x.h"
#include "leds.h"

void leds_init()
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9;
 80005f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80005f6:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80005f8:	2310      	movs	r3, #16
 80005fa:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 80005fc:	2301      	movs	r3, #1
 80005fe:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000606:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800060a:	4619      	mov	r1, r3
 800060c:	f001 fabe 	bl	8001b8c <GPIO_Init>

    leds_green_off();
 8000610:	f000 f806 	bl	8000620 <leds_green_off>
    leds_blue_off();
 8000614:	f000 f810 	bl	8000638 <leds_blue_off>
}
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop

08000620 <leds_green_off>:

void leds_green_off()
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
    GPIO_WriteBit(GPIOC, GPIO_Pin_9, 0);
 8000624:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000628:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800062c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000630:	2200      	movs	r2, #0
 8000632:	f001 fbe7 	bl	8001e04 <GPIO_WriteBit>
}
 8000636:	bd80      	pop	{r7, pc}

08000638 <leds_blue_off>:

void leds_blue_off()
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
    GPIO_WriteBit(GPIOC, GPIO_Pin_8, 0);
 800063c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000640:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000644:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000648:	2200      	movs	r2, #0
 800064a:	f001 fbdb 	bl	8001e04 <GPIO_WriteBit>
}
 800064e:	bd80      	pop	{r7, pc}

08000650 <leds_green_on>:

void leds_green_on()
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
    GPIO_WriteBit(GPIOC, GPIO_Pin_9, 1);
 8000654:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000658:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800065c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000660:	2201      	movs	r2, #1
 8000662:	f001 fbcf 	bl	8001e04 <GPIO_WriteBit>
}
 8000666:	bd80      	pop	{r7, pc}

08000668 <leds_blue_on>:

void leds_blue_on()
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
    GPIO_WriteBit(GPIOC, GPIO_Pin_8, 1);
 800066c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000670:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000674:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000678:	2201      	movs	r2, #1
 800067a:	f001 fbc3 	bl	8001e04 <GPIO_WriteBit>
}
 800067e:	bd80      	pop	{r7, pc}

08000680 <main>:
#include "button.h"
#include "timer.h"
#include "leds.h"

int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
    // Enable GPIO clock
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8000686:	2004      	movs	r0, #4
 8000688:	2101      	movs	r1, #1
 800068a:	f001 f8ab 	bl	80017e4 <RCC_APB2PeriphClockCmd>
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 800068e:	2008      	movs	r0, #8
 8000690:	2101      	movs	r1, #1
 8000692:	f001 f8a7 	bl	80017e4 <RCC_APB2PeriphClockCmd>
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8000696:	2010      	movs	r0, #16
 8000698:	2101      	movs	r1, #1
 800069a:	f001 f8a3 	bl	80017e4 <RCC_APB2PeriphClockCmd>
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
 800069e:	2001      	movs	r0, #1
 80006a0:	2101      	movs	r1, #1
 80006a2:	f001 f89f 	bl	80017e4 <RCC_APB2PeriphClockCmd>

    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 80006a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006aa:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80006ac:	2304      	movs	r3, #4
 80006ae:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 80006b0:	2301      	movs	r3, #1
 80006b2:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOB, &GPIO_InitStructure);
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80006ba:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80006be:	4619      	mov	r1, r3
 80006c0:	f001 fa64 	bl	8001b8c <GPIO_Init>

	GPIO_EXTILineConfig(GPIO_PortSourceGPIOB, GPIO_PinSource9);
 80006c4:	2001      	movs	r0, #1
 80006c6:	2109      	movs	r1, #9
 80006c8:	f001 fc94 	bl	8001ff4 <GPIO_EXTILineConfig>
	
    timer2_init();
 80006cc:	f000 f81a 	bl	8000704 <timer2_init>
    usart_init();
 80006d0:	f000 f8ee 	bl	80008b0 <usart_init>
    button_init();
 80006d4:	f7ff ff06 	bl	80004e4 <button_init>
    leds_init();
 80006d8:	f7ff ff88 	bl	80005ec <leds_init>

    while(1) { }
 80006dc:	e7fe      	b.n	80006dc <main+0x5c>
 80006de:	bf00      	nop

080006e0 <setup_interrupt>:
#include "stm32f10x.h"

static bool finished = false;

static void setup_interrupt()
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStructure;
    NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 80006e6:	231c      	movs	r3, #28
 80006e8:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80006f2:	2301      	movs	r3, #1
 80006f4:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	4618      	mov	r0, r3
 80006fa:	f000 fc11 	bl	8000f20 <NVIC_Init>
}
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <timer2_init>:

void timer2_init()
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
    setup_interrupt();
 800070a:	f7ff ffe9 	bl	80006e0 <setup_interrupt>

    // Set timer
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 800070e:	2001      	movs	r0, #1
 8000710:	2101      	movs	r1, #1
 8000712:	f001 f88f 	bl	8001834 <RCC_APB1PeriphClockCmd>
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
    // 50000/24 should give us a 1us tick, 50ms total
    TIM_TimeBaseStructure.TIM_Period = 50000;
 8000716:	f24c 3350 	movw	r3, #50000	; 0xc350
 800071a:	813b      	strh	r3, [r7, #8]
    TIM_TimeBaseStructure.TIM_Prescaler = 24;
 800071c:	2318      	movs	r3, #24
 800071e:	80bb      	strh	r3, [r7, #4]
    TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8000720:	2300      	movs	r3, #0
 8000722:	817b      	strh	r3, [r7, #10]
    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8000724:	2300      	movs	r3, #0
 8000726:	80fb      	strh	r3, [r7, #6]
    TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);    
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800072e:	4619      	mov	r1, r3
 8000730:	f001 ff28 	bl	8002584 <TIM_TimeBaseInit>
    TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 8000734:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000738:	2101      	movs	r1, #1
 800073a:	2201      	movs	r2, #1
 800073c:	f002 fb4a 	bl	8002dd4 <TIM_ITConfig>
}
 8000740:	3710      	adds	r7, #16
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop

08000748 <timer2_start>:

void timer2_start()
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
    finished = false;
 800074c:	f240 0335 	movw	r3, #53	; 0x35
 8000750:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000754:	2200      	movs	r2, #0
 8000756:	701a      	strb	r2, [r3, #0]
    TIM_SetCounter(TIM2, 0);
 8000758:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800075c:	2100      	movs	r1, #0
 800075e:	f003 f981 	bl	8003a64 <TIM_SetCounter>
    TIM_Cmd(TIM2, ENABLE);
 8000762:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000766:	2101      	movs	r1, #1
 8000768:	f002 faee 	bl	8002d48 <TIM_Cmd>
}
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop

08000770 <timer2_stop>:

void timer2_stop()
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
    TIM_Cmd(TIM2, DISABLE);
 8000774:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000778:	2100      	movs	r1, #0
 800077a:	f002 fae5 	bl	8002d48 <TIM_Cmd>
}
 800077e:	bd80      	pop	{r7, pc}

08000780 <timer2_has_finished>:

bool timer2_has_finished()
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
    return finished;
 8000784:	f240 0335 	movw	r3, #53	; 0x35
 8000788:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800078c:	781b      	ldrb	r3, [r3, #0]
}
 800078e:	4618      	mov	r0, r3
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr

08000798 <timer2_get_current_counter>:

int timer2_get_current_counter()
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
    TIM_GetCounter(TIM2);
 800079c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80007a0:	f003 fa7e 	bl	8003ca0 <TIM_GetCounter>
    return 0;
 80007a4:	2300      	movs	r3, #0
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop

080007ac <timer2_interrupt_handler>:

void timer2_interrupt_handler()
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
    timer2_stop();
 80007b0:	f7ff ffde 	bl	8000770 <timer2_stop>
    finished = true;    
 80007b4:	f240 0335 	movw	r3, #53	; 0x35
 80007b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80007bc:	2201      	movs	r2, #1
 80007be:	701a      	strb	r2, [r3, #0]
}
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop

080007c4 <usart_putc>:
#include <sys/unistd.h>
#include <sys/times.h>


void usart_putc(uint8_t ch)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	71fb      	strb	r3, [r7, #7]
    while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET) {}
 80007ce:	bf00      	nop
 80007d0:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 80007d4:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80007d8:	2180      	movs	r1, #128	; 0x80
 80007da:	f003 ffd7 	bl	800478c <USART_GetFlagStatus>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d0f5      	beq.n	80007d0 <usart_putc+0xc>
    USART_SendData(USART1, (uint8_t) ch);
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	b29b      	uxth	r3, r3
 80007e8:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 80007ec:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80007f0:	4619      	mov	r1, r3
 80007f2:	f003 fe7f 	bl	80044f4 <USART_SendData>
    //Loop until the end of transmission
    //while(USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET) {}
}
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <usart_puts>:

void usart_puts(volatile char *s)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
    while(*s){
 8000804:	e009      	b.n	800081a <usart_puts+0x1e>
        usart_putc(*s);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	b2db      	uxtb	r3, r3
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff ffd9 	bl	80007c4 <usart_putc>
        *s++;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	1c5a      	adds	r2, r3, #1
 8000816:	607a      	str	r2, [r7, #4]
 8000818:	781b      	ldrb	r3, [r3, #0]
    //while(USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET) {}
}

void usart_puts(volatile char *s)
{
    while(*s){
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	b2db      	uxtb	r3, r3
 8000820:	2b00      	cmp	r3, #0
 8000822:	d1f0      	bne.n	8000806 <usart_puts+0xa>
        usart_putc(*s);
        *s++;
    }
}
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop

0800082c <_write>:

int _write(int file, char *ptr, int len) {
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	607a      	str	r2, [r7, #4]
    int n;
    switch (file) {
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	2b01      	cmp	r3, #1
 800083c:	d002      	beq.n	8000844 <_write+0x18>
 800083e:	2b02      	cmp	r3, #2
 8000840:	d012      	beq.n	8000868 <_write+0x3c>
 8000842:	e023      	b.n	800088c <_write+0x60>
    case STDOUT_FILENO: //stdout
        for (n = 0; n < len; n++) {
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]
 8000848:	e009      	b.n	800085e <_write+0x32>
            usart_putc(*ptr++ & (uint16_t)0x01FF);
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	1c5a      	adds	r2, r3, #1
 800084e:	60ba      	str	r2, [r7, #8]
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff ffb6 	bl	80007c4 <usart_putc>

int _write(int file, char *ptr, int len) {
    int n;
    switch (file) {
    case STDOUT_FILENO: //stdout
        for (n = 0; n < len; n++) {
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	3301      	adds	r3, #1
 800085c:	617b      	str	r3, [r7, #20]
 800085e:	697a      	ldr	r2, [r7, #20]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	429a      	cmp	r2, r3
 8000864:	dbf1      	blt.n	800084a <_write+0x1e>
            usart_putc(*ptr++ & (uint16_t)0x01FF);
        }
        break;
 8000866:	e014      	b.n	8000892 <_write+0x66>
    case STDERR_FILENO: //stderr 
        for (n = 0; n < len; n++) {
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]
 800086c:	e009      	b.n	8000882 <_write+0x56>
            usart_putc(*ptr++ & (uint16_t)0x01FF);
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	1c5a      	adds	r2, r3, #1
 8000872:	60ba      	str	r2, [r7, #8]
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff ffa4 	bl	80007c4 <usart_putc>
        for (n = 0; n < len; n++) {
            usart_putc(*ptr++ & (uint16_t)0x01FF);
        }
        break;
    case STDERR_FILENO: //stderr 
        for (n = 0; n < len; n++) {
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	3301      	adds	r3, #1
 8000880:	617b      	str	r3, [r7, #20]
 8000882:	697a      	ldr	r2, [r7, #20]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	429a      	cmp	r2, r3
 8000888:	dbf1      	blt.n	800086e <_write+0x42>
            usart_putc(*ptr++ & (uint16_t)0x01FF);
        }
        break;
 800088a:	e002      	b.n	8000892 <_write+0x66>
    default:
        //errno = EBADF;
        return -1;
 800088c:	f04f 33ff 	mov.w	r3, #4294967295
 8000890:	e000      	b.n	8000894 <_write+0x68>
    }
    return len;
 8000892:	687b      	ldr	r3, [r7, #4]
}
 8000894:	4618      	mov	r0, r3
 8000896:	3718      	adds	r7, #24
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <printf>:

void printf(char *ptr)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
    usart_puts(ptr);
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f7ff ffa9 	bl	80007fc <usart_puts>
}
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <usart_init>:

void usart_init()
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b086      	sub	sp, #24
 80008b4:	af00      	add	r7, sp, #0
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE); 
 80008b6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80008ba:	2101      	movs	r1, #1
 80008bc:	f000 ff92 	bl	80017e4 <RCC_APB2PeriphClockCmd>

    /* Configure USART Tx as alternate function push-pull */
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80008c0:	2318      	movs	r3, #24
 80008c2:	75fb      	strb	r3, [r7, #23]
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 80008c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008c8:	82bb      	strh	r3, [r7, #20]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80008ca:	2303      	movs	r3, #3
 80008cc:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 80008ce:	f107 0314 	add.w	r3, r7, #20
 80008d2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80008d6:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80008da:	4619      	mov	r1, r3
 80008dc:	f001 f956 	bl	8001b8c <GPIO_Init>

    /* Configure USART Rx as input floating */
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80008e0:	2304      	movs	r3, #4
 80008e2:	75fb      	strb	r3, [r7, #23]
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 80008e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008e8:	82bb      	strh	r3, [r7, #20]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80008f2:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80008f6:	4619      	mov	r1, r3
 80008f8:	f001 f948 	bl	8001b8c <GPIO_Init>

    /* USART configuration */
    USART_InitTypeDef USART_InitStructure;
    USART_InitStructure.USART_BaudRate = 115200;
 80008fc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000900:	607b      	str	r3, [r7, #4]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8000902:	2300      	movs	r3, #0
 8000904:	813b      	strh	r3, [r7, #8]
    USART_InitStructure.USART_Parity = USART_Parity_No;
 8000906:	2300      	movs	r3, #0
 8000908:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
 800090a:	2300      	movs	r3, #0
 800090c:	817b      	strh	r3, [r7, #10]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 800090e:	2300      	movs	r3, #0
 8000910:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000912:	230c      	movs	r3, #12
 8000914:	81fb      	strh	r3, [r7, #14]
    USART_Init(USART1, &USART_InitStructure);
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800091c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000920:	4619      	mov	r1, r3
 8000922:	f003 fba9 	bl	8004078 <USART_Init>
    
    /* Enable USART */
    USART_Cmd(USART1, ENABLE);
 8000926:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800092a:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800092e:	2101      	movs	r1, #1
 8000930:	f003 fcc0 	bl	80042b4 <USART_Cmd>

    printf("USART Initialized.\n");
 8000934:	f644 00cc 	movw	r0, #18636	; 0x48cc
 8000938:	f6c0 0000 	movt	r0, #2048	; 0x800
 800093c:	f7ff ffae 	bl	800089c <printf>
}
 8000940:	3718      	adds	r7, #24
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop

08000948 <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
 8000948:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, psp\n\t" 
 800094a:	f3ef 8309 	mrs	r3, PSP
 800094e:	4618      	mov	r0, r3
 8000950:	4770      	bx	lr
 8000952:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
 8000954:	4623      	mov	r3, r4
}
 8000956:	4618      	mov	r0, r3

08000958 <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP 
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
 8000958:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
 800095a:	f383 8809 	msr	PSP, r3
 800095e:	4770      	bx	lr

08000960 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
 8000960:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, msp\n\t" 
 8000962:	f3ef 8308 	mrs	r3, MSP
 8000966:	4618      	mov	r0, r3
 8000968:	4770      	bx	lr
 800096a:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
 800096c:	4623      	mov	r3, r4
}
 800096e:	4618      	mov	r0, r3

08000970 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP 
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
 8000970:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
 8000972:	f383 8808 	msr	MSP, r3
 8000976:	4770      	bx	lr

08000978 <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
  uint32_t result=0;
 800097e:	2300      	movs	r3, #0
 8000980:	607b      	str	r3, [r7, #4]
  
  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
 8000982:	f3ef 8312 	mrs	r3, BASEPRI_MAX
 8000986:	607b      	str	r3, [r7, #4]
  return(result);
 8000988:	687b      	ldr	r3, [r7, #4]
}
 800098a:	4618      	mov	r0, r3
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop

08000998 <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f383 8811 	msr	BASEPRI, r3
}
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
  uint32_t result=0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80009ba:	f3ef 8310 	mrs	r3, PRIMASK
 80009be:	607b      	str	r3, [r7, #4]
  return(result);
 80009c0:	687b      	ldr	r3, [r7, #4]
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop

080009d0 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	f383 8810 	msr	PRIMASK, r3
}
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
  uint32_t result=0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]
  
  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 80009f2:	f3ef 8313 	mrs	r3, FAULTMASK
 80009f6:	607b      	str	r3, [r7, #4]
  return(result);
 80009f8:	687b      	ldr	r3, [r7, #4]
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	f383 8813 	msr	FAULTMASK, r3
}
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
  uint32_t result=0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000a2a:	f3ef 8314 	mrs	r3, CONTROL
 8000a2e:	607b      	str	r3, [r7, #4]
  return(result);
 8000a30:	687b      	ldr	r3, [r7, #4]
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f383 8814 	msr	CONTROL, r3
}
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	60fb      	str	r3, [r7, #12]
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	ba1b      	rev	r3, r3
 8000a68:	60fb      	str	r3, [r7, #12]
  return(result);
 8000a6a:	68fb      	ldr	r3, [r7, #12]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3714      	adds	r7, #20
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
  
  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
 8000a86:	88fb      	ldrh	r3, [r7, #6]
 8000a88:	ba5b      	rev16	r3, r3
 8000a8a:	60fb      	str	r3, [r7, #12]
  return(result);
 8000a8c:	68fb      	ldr	r3, [r7, #12]
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3714      	adds	r7, #20
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]
  
  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
 8000aaa:	88fb      	ldrh	r3, [r7, #6]
 8000aac:	badb      	revsh	r3, r3
 8000aae:	60fb      	str	r3, [r7, #12]
  return(result);
 8000ab0:	68fb      	ldr	r3, [r7, #12]
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3714      	adds	r7, #20
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop

08000ac0 <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	fa93 f3a3 	rbit	r3, r3
 8000ad2:	60fb      	str	r3, [r7, #12]
   return(result);
 8000ad4:	68fb      	ldr	r3, [r7, #12]
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3714      	adds	r7, #20
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop

08000ae4 <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	73fb      	strb	r3, [r7, #15]
  
   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	e8d3 3f4f 	ldrexb	r3, [r3]
 8000af6:	73fb      	strb	r3, [r7, #15]
   return(result);
 8000af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3714      	adds	r7, #20
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	81fb      	strh	r3, [r7, #14]
  
   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	e8d3 3f5f 	ldrexh	r3, [r3]
 8000b1a:	81fb      	strh	r3, [r7, #14]
   return(result);
 8000b1c:	89fb      	ldrh	r3, [r7, #14]
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3714      	adds	r7, #20
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	e853 3f00 	ldrex	r3, [r3]
 8000b3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8000b40:	68fb      	ldr	r3, [r7, #12]
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3714      	adds	r7, #20
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__STREXB>:
 * @return        successful / failed
 *
 * Exclusive STR command for 8 bit values
 */
uint32_t __STREXB(uint8_t value, uint8_t *addr)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	6039      	str	r1, [r7, #0]
 8000b5a:	71fb      	strb	r3, [r7, #7]
   uint32_t result=0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("strexb %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
 8000b60:	683a      	ldr	r2, [r7, #0]
 8000b62:	79f9      	ldrb	r1, [r7, #7]
 8000b64:	e8c2 1f43 	strexb	r3, r1, [r2]
 8000b68:	60fb      	str	r3, [r7, #12]
   return(result);
 8000b6a:	68fb      	ldr	r3, [r7, #12]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3714      	adds	r7, #20
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <__STREXH>:
 * @return        successful / failed
 *
 * Exclusive STR command for 16 bit values
 */
uint32_t __STREXH(uint16_t value, uint16_t *addr)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	6039      	str	r1, [r7, #0]
 8000b82:	80fb      	strh	r3, [r7, #6]
   uint32_t result=0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("strexh %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
 8000b88:	683a      	ldr	r2, [r7, #0]
 8000b8a:	88f9      	ldrh	r1, [r7, #6]
 8000b8c:	e8c2 1f53 	strexh	r3, r1, [r2]
 8000b90:	60fb      	str	r3, [r7, #12]
   return(result);
 8000b92:	68fb      	ldr	r3, [r7, #12]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3714      	adds	r7, #20
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	687a      	ldr	r2, [r7, #4]
 8000bb2:	e843 2300 	strex	r3, r2, [r3]
 8000bb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8000bb8:	68fb      	ldr	r3, [r7, #12]
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3714      	adds	r7, #20
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000bd4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bd8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000bdc:	6812      	ldr	r2, [r2, #0]
 8000bde:	f042 0201 	orr.w	r2, r2, #1
 8000be2:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000be4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000be8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000bec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bf0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000bf4:	6859      	ldr	r1, [r3, #4]
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
 8000bfc:	400b      	ands	r3, r1
 8000bfe:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000c00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c04:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c0c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000c10:	6812      	ldr	r2, [r2, #0]
 8000c12:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000c16:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000c1a:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000c1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c20:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c28:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000c2c:	6812      	ldr	r2, [r2, #0]
 8000c2e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000c32:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000c34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c38:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c40:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000c44:	6852      	ldr	r2, [r2, #4]
 8000c46:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000c4a:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) 
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000c4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c50:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c54:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000c58:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
 8000c5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c5e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c62:	2200      	movs	r2, #0
 8000c64:	62da      	str	r2, [r3, #44]	; 0x2c
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000c66:	f000 f897 	bl	8000d98 <SetSysClock>
}
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <SystemCoreClockUpdate>:
  * @note   None
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	2300      	movs	r3, #0
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	607b      	str	r3, [r7, #4]
#ifdef  STM32F10X_CL
  uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
#endif /* STM32F10X_CL */

#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL)
  uint32_t prediv1factor = 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	603b      	str	r3, [r7, #0]
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000c82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c86:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f003 030c 	and.w	r3, r3, #12
 8000c90:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	2b04      	cmp	r3, #4
 8000c96:	d00d      	beq.n	8000cb4 <SystemCoreClockUpdate+0x48>
 8000c98:	2b08      	cmp	r3, #8
 8000c9a:	d015      	beq.n	8000cc8 <SystemCoreClockUpdate+0x5c>
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d150      	bne.n	8000d42 <SystemCoreClockUpdate+0xd6>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_Value;
 8000ca0:	f240 0304 	movw	r3, #4
 8000ca4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ca8:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 8000cac:	f2c0 027a 	movt	r2, #122	; 0x7a
 8000cb0:	601a      	str	r2, [r3, #0]
      break;
 8000cb2:	e050      	b.n	8000d56 <SystemCoreClockUpdate+0xea>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_Value;
 8000cb4:	f240 0304 	movw	r3, #4
 8000cb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000cbc:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 8000cc0:	f2c0 027a 	movt	r2, #122	; 0x7a
 8000cc4:	601a      	str	r2, [r3, #0]
      break;
 8000cc6:	e046      	b.n	8000d56 <SystemCoreClockUpdate+0xea>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000cc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ccc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000cd6:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000cd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cdc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ce6:	607b      	str	r3, [r7, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	0c9b      	lsrs	r3, r3, #18
 8000cec:	3302      	adds	r3, #2
 8000cee:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d10c      	bne.n	8000d10 <SystemCoreClockUpdate+0xa4>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_Value >> 1) * pllmull;
 8000cf6:	68ba      	ldr	r2, [r7, #8]
 8000cf8:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8000cfc:	f2c0 033d 	movt	r3, #61	; 0x3d
 8000d00:	fb03 f202 	mul.w	r2, r3, r2
 8000d04:	f240 0304 	movw	r3, #4
 8000d08:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d0c:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_Value / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8000d0e:	e022      	b.n	8000d56 <SystemCoreClockUpdate+0xea>
        SystemCoreClock = (HSI_Value >> 1) * pllmull;
      }
      else
      {
 #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL)
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000d10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d14:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d1a:	f003 030f 	and.w	r3, r3, #15
 8000d1e:	3301      	adds	r3, #1
 8000d20:	603b      	str	r3, [r7, #0]
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_Value / prediv1factor) * pllmull; 
 8000d22:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8000d26:	f2c0 037a 	movt	r3, #122	; 0x7a
 8000d2a:	683a      	ldr	r2, [r7, #0]
 8000d2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000d30:	68ba      	ldr	r2, [r7, #8]
 8000d32:	fb02 f203 	mul.w	r2, r2, r3
 8000d36:	f240 0304 	movw	r3, #4
 8000d3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d3e:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_Value / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8000d40:	e009      	b.n	8000d56 <SystemCoreClockUpdate+0xea>

    default:
      SystemCoreClock = HSI_Value;
 8000d42:	f240 0304 	movw	r3, #4
 8000d46:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d4a:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 8000d4e:	f2c0 027a 	movt	r2, #122	; 0x7a
 8000d52:	601a      	str	r2, [r3, #0]
      break;
 8000d54:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000d56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d5a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d64:	091a      	lsrs	r2, r3, #4
 8000d66:	f240 0308 	movw	r3, #8
 8000d6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d6e:	5c9b      	ldrb	r3, [r3, r2]
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8000d74:	f240 0304 	movw	r3, #4
 8000d78:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	40da      	lsrs	r2, r3
 8000d82:	f240 0304 	movw	r3, #4
 8000d86:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d8a:	601a      	str	r2, [r3, #0]
}
 8000d8c:	3714      	adds	r7, #20
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop

08000d98 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
#ifdef SYSCLK_FREQ_HSE
  SetSysClockToHSE();
#elif defined SYSCLK_FREQ_24MHz
  SetSysClockTo24();
 8000d9c:	f000 f802 	bl	8000da4 <SetSysClockTo24>
  SetSysClockTo72();
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop

08000da4 <SetSysClockTo24>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo24(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	607b      	str	r3, [r7, #4]
 8000dae:	2300      	movs	r3, #0
 8000db0:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000db2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000db6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000dba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dbe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000dc2:	6812      	ldr	r2, [r2, #0]
 8000dc4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000dc8:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000dca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dd8:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSEStartUp_TimeOut));
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d103      	bne.n	8000dee <SetSysClockTo24+0x4a>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000dec:	d1ed      	bne.n	8000dca <SetSysClockTo24+0x26>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000dee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d002      	beq.n	8000e06 <SetSysClockTo24+0x62>
  {
    HSEStatus = (uint32_t)0x01;
 8000e00:	2301      	movs	r3, #1
 8000e02:	603b      	str	r3, [r7, #0]
 8000e04:	e001      	b.n	8000e0a <SetSysClockTo24+0x66>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000e06:	2300      	movs	r3, #0
 8000e08:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d16d      	bne.n	8000eec <SetSysClockTo24+0x148>
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;    
#endif
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000e10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e14:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e18:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e1c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000e20:	6852      	ldr	r2, [r2, #4]
 8000e22:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000e24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e28:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e30:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000e34:	6852      	ldr	r2, [r2, #4]
 8000e36:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 8000e38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e3c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e40:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e44:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000e48:	6852      	ldr	r2, [r2, #4]
 8000e4a:	605a      	str	r2, [r3, #4]
    while((RCC->CR & RCC_CR_PLL2RDY) == 0)
    {
    }   
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL)
    /*  PLL configuration:  = (HSE / 2) * 6 = 24 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8000e4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e50:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e58:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000e5c:	6852      	ldr	r2, [r2, #4]
 8000e5e:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8000e62:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1_Div2 | RCC_CFGR_PLLMULL6);
 8000e64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e68:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e70:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000e74:	6852      	ldr	r2, [r2, #4]
 8000e76:	f442 1298 	orr.w	r2, r2, #1245184	; 0x130000
 8000e7a:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLXTPRE_HSE_Div2 | RCC_CFGR_PLLMULL6);
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000e7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e80:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e88:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000e8c:	6812      	ldr	r2, [r2, #0]
 8000e8e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000e92:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000e94:	bf00      	nop
 8000e96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e9a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d0f6      	beq.n	8000e96 <SetSysClockTo24+0xf2>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000ea8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000eb0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000eb4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000eb8:	6852      	ldr	r2, [r2, #4]
 8000eba:	f022 0203 	bic.w	r2, r2, #3
 8000ebe:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000ec0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ec4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ec8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ecc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000ed0:	6852      	ldr	r2, [r2, #4]
 8000ed2:	f042 0202 	orr.w	r2, r2, #2
 8000ed6:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000ed8:	bf00      	nop
 8000eda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ede:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f003 030c 	and.w	r3, r3, #12
 8000ee8:	2b08      	cmp	r3, #8
 8000eea:	d1f6      	bne.n	8000eda <SetSysClockTo24+0x136>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  } 
}
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000f00:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000f04:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
 8000f0e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000f12:	60da      	str	r2, [r3, #12]
}
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *   the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b087      	sub	sp, #28
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	230f      	movs	r3, #15
 8000f32:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	78db      	ldrb	r3, [r3, #3]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d042      	beq.n	8000fc2 <NVIC_Init+0xa2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000f3c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000f40:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000f44:	68db      	ldr	r3, [r3, #12]
 8000f46:	43db      	mvns	r3, r3
 8000f48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000f4c:	0a1b      	lsrs	r3, r3, #8
 8000f4e:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	f1c3 0304 	rsb	r3, r3, #4
 8000f56:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	68fa      	ldr	r2, [r7, #12]
 8000f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f60:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	785b      	ldrb	r3, [r3, #1]
 8000f66:	461a      	mov	r2, r3
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	789b      	ldrb	r3, [r3, #2]
 8000f74:	461a      	mov	r2, r3
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	697a      	ldr	r2, [r7, #20]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	011b      	lsls	r3, r3, #4
 8000f84:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000f86:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000f8a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	7812      	ldrb	r2, [r2, #0]
 8000f92:	4611      	mov	r1, r2
 8000f94:	697a      	ldr	r2, [r7, #20]
 8000f96:	b2d2      	uxtb	r2, r2
 8000f98:	440b      	add	r3, r1
 8000f9a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000f9e:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000fa2:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	7812      	ldrb	r2, [r2, #0]
 8000faa:	0952      	lsrs	r2, r2, #5
 8000fac:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000fae:	6879      	ldr	r1, [r7, #4]
 8000fb0:	7809      	ldrb	r1, [r1, #0]
 8000fb2:	f001 011f 	and.w	r1, r1, #31
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000fbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000fc0:	e011      	b.n	8000fe6 <NVIC_Init+0xc6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000fc2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000fc6:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	7812      	ldrb	r2, [r2, #0]
 8000fce:	0952      	lsrs	r2, r2, #5
 8000fd0:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000fd2:	6879      	ldr	r1, [r7, #4]
 8000fd4:	7809      	ldrb	r1, [r1, #0]
 8000fd6:	f001 011f 	and.w	r1, r1, #31
 8000fda:	2001      	movs	r0, #1
 8000fdc:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000fe0:	3220      	adds	r2, #32
 8000fe2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000fe6:	371c      	adds	r7, #28
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x100.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8000ffa:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000ffe:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001002:	683a      	ldr	r2, [r7, #0]
 8001004:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8001008:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800100c:	6879      	ldr	r1, [r7, #4]
 800100e:	430a      	orrs	r2, r1
 8001010:	609a      	str	r2, [r3, #8]
}
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	71fa      	strb	r2, [r7, #7]
 8001028:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 800102a:	79bb      	ldrb	r3, [r7, #6]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d00c      	beq.n	800104a <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
 8001030:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8001034:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001038:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 800103c:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8001040:	6911      	ldr	r1, [r2, #16]
 8001042:	79fa      	ldrb	r2, [r7, #7]
 8001044:	430a      	orrs	r2, r1
 8001046:	611a      	str	r2, [r3, #16]
 8001048:	e00c      	b.n	8001064 <NVIC_SystemLPConfig+0x48>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 800104a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800104e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001052:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8001056:	f2ce 0200 	movt	r2, #57344	; 0xe000
 800105a:	6911      	ldr	r1, [r2, #16]
 800105c:	79fa      	ldrb	r2, [r7, #7]
 800105e:	43d2      	mvns	r2, r2
 8001060:	400a      	ands	r2, r1
 8001062:	611a      	str	r2, [r3, #16]
  }
}
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b04      	cmp	r3, #4
 800107c:	d10c      	bne.n	8001098 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 800107e:	f24e 0310 	movw	r3, #57360	; 0xe010
 8001082:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001086:	f24e 0210 	movw	r2, #57360	; 0xe010
 800108a:	f2ce 0200 	movt	r2, #57344	; 0xe000
 800108e:	6812      	ldr	r2, [r2, #0]
 8001090:	f042 0204 	orr.w	r2, r2, #4
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	e00b      	b.n	80010b0 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8001098:	f24e 0310 	movw	r3, #57360	; 0xe010
 800109c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80010a0:	f24e 0210 	movw	r2, #57360	; 0xe010
 80010a4:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80010a8:	6812      	ldr	r2, [r2, #0]
 80010aa:	f022 0204 	bic.w	r2, r2, #4
 80010ae:	601a      	str	r2, [r3, #0]
  }
}
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop

080010bc <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80010c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80010c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010cc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80010d0:	6812      	ldr	r2, [r2, #0]
 80010d2:	f042 0201 	orr.w	r2, r2, #1
 80010d6:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80010d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010dc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80010e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80010e8:	6859      	ldr	r1, [r3, #4]
 80010ea:	2300      	movs	r3, #0
 80010ec:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
 80010f0:	400b      	ands	r3, r1
 80010f2:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80010f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80010fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001100:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001104:	6812      	ldr	r2, [r2, #0]
 8001106:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800110a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800110e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001110:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001114:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001118:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800111c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001120:	6812      	ldr	r2, [r2, #0]
 8001122:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001126:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001128:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800112c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001130:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001134:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001138:	6852      	ldr	r2, [r2, #4]
 800113a:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800113e:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) 
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8001140:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001144:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001148:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800114c:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
 800114e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001152:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001156:	2200      	movs	r2, #0
 8001158:	62da      	str	r2, [r3, #44]	; 0x2c
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
#endif /* STM32F10X_CL */

}
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop

08001164 <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 800116c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001170:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001174:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001178:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800117c:	6812      	ldr	r2, [r2, #0]
 800117e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001182:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 8001184:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001188:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800118c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001190:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001194:	6812      	ldr	r2, [r2, #0]
 8001196:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800119a:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011a2:	d003      	beq.n	80011ac <RCC_HSEConfig+0x48>
 80011a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80011a8:	d00d      	beq.n	80011c6 <RCC_HSEConfig+0x62>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;
      
    default:
      break;
 80011aa:	e019      	b.n	80011e0 <RCC_HSEConfig+0x7c>
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
 80011ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80011b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011b8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80011bc:	6812      	ldr	r2, [r2, #0]
 80011be:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80011c2:	601a      	str	r2, [r3, #0]
      break;
 80011c4:	e00c      	b.n	80011e0 <RCC_HSEConfig+0x7c>
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 80011c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80011ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011d2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80011d6:	6812      	ldr	r2, [r2, #0]
 80011d8:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 80011dc:	601a      	str	r2, [r3, #0]
      break;
 80011de:	bf00      	nop
      
    default:
      break;
  }
}
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop

080011ec <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 80011f6:	2300      	movs	r3, #0
 80011f8:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
 80011fa:	2300      	movs	r3, #0
 80011fc:	71bb      	strb	r3, [r7, #6]
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 80011fe:	2031      	movs	r0, #49	; 0x31
 8001200:	f000 fbc0 	bl	8001984 <RCC_GetFlagStatus>
 8001204:	4603      	mov	r3, r0
 8001206:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;  
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	3301      	adds	r3, #1
 800120c:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSEStartUp_TimeOut) && (HSEStatus == RESET));
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001214:	d002      	beq.n	800121c <RCC_WaitForHSEStartUp+0x30>
 8001216:	79bb      	ldrb	r3, [r7, #6]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d0f0      	beq.n	80011fe <RCC_WaitForHSEStartUp+0x12>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 800121c:	2031      	movs	r0, #49	; 0x31
 800121e:	f000 fbb1 	bl	8001984 <RCC_GetFlagStatus>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d002      	beq.n	800122e <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 8001228:	2301      	movs	r3, #1
 800122a:	71fb      	strb	r3, [r7, #7]
 800122c:	e001      	b.n	8001232 <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 800122e:	2300      	movs	r3, #0
 8001230:	71fb      	strb	r3, [r7, #7]
  }  
  return (status);
 8001232:	79fb      	ldrb	r3, [r7, #7]
}
 8001234:	4618      	mov	r0, r3
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
 8001246:	2300      	movs	r3, #0
 8001248:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
 800124a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800124e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800125c:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	4313      	orrs	r3, r2
 8001266:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
 8001268:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800126c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001270:	68fa      	ldr	r2, [r7, #12]
 8001272:	601a      	str	r2, [r3, #0]
}
 8001274:	3714      	adds	r7, #20
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop

08001280 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 800128a:	2300      	movs	r3, #0
 800128c:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8001290:	79fa      	ldrb	r2, [r7, #7]
 8001292:	601a      	str	r2, [r3, #0]
}
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop

080012a0 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 80012ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012b2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 80012c0:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	68fa      	ldr	r2, [r7, #12]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80012ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	605a      	str	r2, [r3, #4]
}
 80012da:	3714      	adds	r7, #20
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 80012ee:	2360      	movs	r3, #96	; 0x60
 80012f0:	f2c4 2342 	movt	r3, #16962	; 0x4242
 80012f4:	79fa      	ldrb	r2, [r7, #7]
 80012f6:	601a      	str	r2, [r3, #0]
}
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop

08001304 <RCC_PREDIV1Config>:
  * @param  RCC_PREDIV1_Div: specifies the PREDIV1 clock division factor.
  *   This parameter can be RCC_PREDIV1_Divx where x:[1,16]
  * @retval None
  */
void RCC_PREDIV1Config(uint32_t RCC_PREDIV1_Source, uint32_t RCC_PREDIV1_Div)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PREDIV1_SOURCE(RCC_PREDIV1_Source));
  assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));

  tmpreg = RCC->CFGR2;
 8001312:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001316:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800131a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800131c:	60fb      	str	r3, [r7, #12]
  /* Clear PREDIV1[3:0] and PREDIV1SRC bits */
  tmpreg &= ~(CFGR2_PREDIV1 | CFGR2_PREDIV1SRC);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001324:	f023 030f 	bic.w	r3, r3, #15
 8001328:	60fb      	str	r3, [r7, #12]
  /* Set the PREDIV1 clock source and division factor */
  tmpreg |= RCC_PREDIV1_Source | RCC_PREDIV1_Div ;
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	4313      	orrs	r3, r2
 8001330:	68fa      	ldr	r2, [r7, #12]
 8001332:	4313      	orrs	r3, r2
 8001334:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR2 = tmpreg;
 8001336:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800133a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001342:	3714      	adds	r7, #20
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
 8001358:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800135c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f023 0303 	bic.w	r3, r3, #3
 800136a:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 800136c:	68fa      	ldr	r2, [r7, #12]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4313      	orrs	r3, r2
 8001372:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001378:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800137c:	68fa      	ldr	r2, [r7, #12]
 800137e:	605a      	str	r2, [r3, #4]
}
 8001380:	3714      	adds	r7, #20
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop

0800138c <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 8001390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001394:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	b2db      	uxtb	r3, r3
 800139c:	f003 030c 	and.w	r3, r3, #12
 80013a0:	b2db      	uxtb	r3, r3
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
 80013b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80013ca:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 80013cc:	68fa      	ldr	r2, [r7, #12]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80013d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80013dc:	68fa      	ldr	r2, [r7, #12]
 80013de:	605a      	str	r2, [r3, #4]
}
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop

080013ec <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 80013f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800140a:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 800140c:	68fa      	ldr	r2, [r7, #12]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4313      	orrs	r3, r2
 8001412:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001414:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001418:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800141c:	68fa      	ldr	r2, [r7, #12]
 800141e:	605a      	str	r2, [r3, #4]
}
 8001420:	3714      	adds	r7, #20
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop

0800142c <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001434:	2300      	movs	r3, #0
 8001436:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 8001438:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800143c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800144a:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	68fa      	ldr	r2, [r7, #12]
 8001452:	4313      	orrs	r3, r2
 8001454:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001456:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800145a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	605a      	str	r2, [r3, #4]
}
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	71fa      	strb	r2, [r7, #7]
 8001478:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800147a:	79bb      	ldrb	r3, [r7, #6]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d00e      	beq.n	800149e <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8001480:	f241 0309 	movw	r3, #4105	; 0x1009
 8001484:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001488:	f241 0209 	movw	r2, #4105	; 0x1009
 800148c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001490:	7812      	ldrb	r2, [r2, #0]
 8001492:	b2d1      	uxtb	r1, r2
 8001494:	79fa      	ldrb	r2, [r7, #7]
 8001496:	430a      	orrs	r2, r1
 8001498:	b2d2      	uxtb	r2, r2
 800149a:	701a      	strb	r2, [r3, #0]
 800149c:	e00f      	b.n	80014be <RCC_ITConfig+0x52>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 800149e:	f241 0309 	movw	r3, #4105	; 0x1009
 80014a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014a6:	f241 0209 	movw	r2, #4105	; 0x1009
 80014aa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80014ae:	7812      	ldrb	r2, [r2, #0]
 80014b0:	b2d1      	uxtb	r1, r2
 80014b2:	79fa      	ldrb	r2, [r7, #7]
 80014b4:	43d2      	mvns	r2, r2
 80014b6:	b2d2      	uxtb	r2, r2
 80014b8:	400a      	ands	r2, r1
 80014ba:	b2d2      	uxtb	r2, r2
 80014bc:	701a      	strb	r2, [r3, #0]
  }
}
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 80014d0:	23d8      	movs	r3, #216	; 0xd8
 80014d2:	f2c4 2342 	movt	r3, #16962	; 0x4242
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	601a      	str	r2, [r3, #0]
}
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
 80014f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001502:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 8001504:	68fa      	ldr	r2, [r7, #12]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4313      	orrs	r3, r2
 800150a:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800150c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001510:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001514:	68fa      	ldr	r2, [r7, #12]
 8001516:	605a      	str	r2, [r3, #4]
}
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop

08001524 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 800152e:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001532:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001536:	2200      	movs	r2, #0
 8001538:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 800153a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 800153e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001542:	2200      	movs	r2, #0
 8001544:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d002      	beq.n	8001552 <RCC_LSEConfig+0x2e>
 800154c:	2b04      	cmp	r3, #4
 800154e:	d007      	beq.n	8001560 <RCC_LSEConfig+0x3c>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;            
      
    default:
      break;      
 8001550:	e00d      	b.n	800156e <RCC_LSEConfig+0x4a>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 8001552:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001556:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800155a:	2201      	movs	r2, #1
 800155c:	701a      	strb	r2, [r3, #0]
      break;
 800155e:	e006      	b.n	800156e <RCC_LSEConfig+0x4a>
      
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8001560:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001564:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001568:	2205      	movs	r2, #5
 800156a:	701a      	strb	r2, [r3, #0]
      break;            
 800156c:	bf00      	nop
      
    default:
      break;      
  }
}
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8001582:	f44f 6390 	mov.w	r3, #1152	; 0x480
 8001586:	f2c4 2342 	movt	r3, #16962	; 0x4242
 800158a:	79fa      	ldrb	r2, [r7, #7]
 800158c:	601a      	str	r2, [r3, #0]
}
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 80015a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015a4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80015a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015ac:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80015b0:	6a11      	ldr	r1, [r2, #32]
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	430a      	orrs	r2, r1
 80015b6:	621a      	str	r2, [r3, #32]
}
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop

080015c4 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 80015ce:	f240 433c 	movw	r3, #1084	; 0x43c
 80015d2:	f2c4 2342 	movt	r3, #16962	; 0x4242
 80015d6:	79fa      	ldrb	r2, [r7, #7]
 80015d8:	601a      	str	r2, [r3, #0]
}
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <RCC_GetClocksFreq>:
  * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold
  *   the clocks frequencies.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b089      	sub	sp, #36	; 0x24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	61fb      	str	r3, [r7, #28]
 80015f0:	2300      	movs	r3, #0
 80015f2:	61bb      	str	r3, [r7, #24]
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
 80015f8:	2300      	movs	r3, #0
 80015fa:	613b      	str	r3, [r7, #16]
#ifdef  STM32F10X_CL
  uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
#endif /* STM32F10X_CL */

#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL)
  uint32_t prediv1factor = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	60fb      	str	r3, [r7, #12]
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8001600:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001604:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f003 030c 	and.w	r3, r3, #12
 800160e:	61fb      	str	r3, [r7, #28]
  
  switch (tmp)
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	2b04      	cmp	r3, #4
 8001614:	d00a      	beq.n	800162c <RCC_GetClocksFreq+0x48>
 8001616:	2b08      	cmp	r3, #8
 8001618:	d00f      	beq.n	800163a <RCC_GetClocksFreq+0x56>
 800161a:	2b00      	cmp	r3, #0
 800161c:	d144      	bne.n	80016a8 <RCC_GetClocksFreq+0xc4>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001624:	f2c0 037a 	movt	r3, #122	; 0x7a
 8001628:	6013      	str	r3, [r2, #0]
      break;
 800162a:	e044      	b.n	80016b6 <RCC_GetClocksFreq+0xd2>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_Value;
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001632:	f2c0 037a 	movt	r3, #122	; 0x7a
 8001636:	6013      	str	r3, [r2, #0]
      break;
 8001638:	e03d      	b.n	80016b6 <RCC_GetClocksFreq+0xd2>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 800163a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800163e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001648:	61bb      	str	r3, [r7, #24]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 800164a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800164e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001658:	617b      	str	r3, [r7, #20]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	0c9b      	lsrs	r3, r3, #18
 800165e:	3302      	adds	r3, #2
 8001660:	61bb      	str	r3, [r7, #24]
      
      if (pllsource == 0x00)
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d109      	bne.n	800167c <RCC_GetClocksFreq+0x98>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_Value >> 1) * pllmull;
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800166e:	f2c0 033d 	movt	r3, #61	; 0x3d
 8001672:	fb03 f202 	mul.w	r2, r3, r2
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_Value / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 800167a:	e01c      	b.n	80016b6 <RCC_GetClocksFreq+0xd2>
        RCC_Clocks->SYSCLK_Frequency = (HSI_Value >> 1) * pllmull;
      }
      else
      {
 #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL)
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 800167c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001680:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001686:	f003 030f 	and.w	r3, r3, #15
 800168a:	3301      	adds	r3, #1
 800168c:	60fb      	str	r3, [r7, #12]
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_Value / prediv1factor) * pllmull; 
 800168e:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001692:	f2c0 037a 	movt	r3, #122	; 0x7a
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	fbb3 f3f2 	udiv	r3, r3, r2
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	fb02 f203 	mul.w	r2, r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_Value / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80016a6:	e006      	b.n	80016b6 <RCC_GetClocksFreq+0xd2>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80016ae:	f2c0 037a 	movt	r3, #122	; 0x7a
 80016b2:	6013      	str	r3, [r2, #0]
      break;
 80016b4:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 80016b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016c4:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 4;
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	091b      	lsrs	r3, r3, #4
 80016ca:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 80016cc:	f240 0318 	movw	r3, #24
 80016d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80016d4:	69fa      	ldr	r2, [r7, #28]
 80016d6:	4413      	add	r3, r2
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	613b      	str	r3, [r7, #16]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	40da      	lsrs	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 80016ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80016f8:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 8;
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	0a1b      	lsrs	r3, r3, #8
 80016fe:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8001700:	f240 0318 	movw	r3, #24
 8001704:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001708:	69fa      	ldr	r2, [r7, #28]
 800170a:	4413      	add	r3, r2
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	b2db      	uxtb	r3, r3
 8001710:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685a      	ldr	r2, [r3, #4]
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	40da      	lsrs	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 800171e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001722:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800172c:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 11;
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	0adb      	lsrs	r3, r3, #11
 8001732:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8001734:	f240 0318 	movw	r3, #24
 8001738:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800173c:	69fa      	ldr	r2, [r7, #28]
 800173e:	4413      	add	r3, r2
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	b2db      	uxtb	r3, r3
 8001744:	613b      	str	r3, [r7, #16]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685a      	ldr	r2, [r3, #4]
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	40da      	lsrs	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8001752:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001756:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001760:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 14;
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	0b9b      	lsrs	r3, r3, #14
 8001766:	61fb      	str	r3, [r7, #28]
  presc = ADCPrescTable[tmp];
 8001768:	f240 0328 	movw	r3, #40	; 0x28
 800176c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001770:	69fa      	ldr	r2, [r7, #28]
 8001772:	4413      	add	r3, r2
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	b2db      	uxtb	r3, r3
 8001778:	613b      	str	r3, [r7, #16]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	68da      	ldr	r2, [r3, #12]
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	fbb2 f2f3 	udiv	r2, r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	611a      	str	r2, [r3, #16]
}
 8001788:	3724      	adds	r7, #36	; 0x24
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop

08001794 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80017a0:	78fb      	ldrb	r3, [r7, #3]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d00c      	beq.n	80017c0 <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 80017a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017aa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80017ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017b2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80017b6:	6951      	ldr	r1, [r2, #20]
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	430a      	orrs	r2, r1
 80017bc:	615a      	str	r2, [r3, #20]
 80017be:	e00c      	b.n	80017da <RCC_AHBPeriphClockCmd+0x46>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 80017c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80017c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017cc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80017d0:	6951      	ldr	r1, [r2, #20]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	43d2      	mvns	r2, r2
 80017d6:	400a      	ands	r2, r1
 80017d8:	615a      	str	r2, [r3, #20]
  }
}
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	460b      	mov	r3, r1
 80017ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80017f0:	78fb      	ldrb	r3, [r7, #3]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d00c      	beq.n	8001810 <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80017f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80017fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001802:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001806:	6991      	ldr	r1, [r2, #24]
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	430a      	orrs	r2, r1
 800180c:	619a      	str	r2, [r3, #24]
 800180e:	e00c      	b.n	800182a <RCC_APB2PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001810:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001814:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001818:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800181c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001820:	6991      	ldr	r1, [r2, #24]
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	43d2      	mvns	r2, r2
 8001826:	400a      	ands	r2, r1
 8001828:	619a      	str	r2, [r3, #24]
  }
}
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	460b      	mov	r3, r1
 800183e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001840:	78fb      	ldrb	r3, [r7, #3]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d00c      	beq.n	8001860 <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001846:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800184a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800184e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001852:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001856:	69d1      	ldr	r1, [r2, #28]
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	430a      	orrs	r2, r1
 800185c:	61da      	str	r2, [r3, #28]
 800185e:	e00c      	b.n	800187a <RCC_APB1PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001860:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001864:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001868:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800186c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001870:	69d1      	ldr	r1, [r2, #28]
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	43d2      	mvns	r2, r2
 8001876:	400a      	ands	r2, r1
 8001878:	61da      	str	r2, [r3, #28]
  }
}
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	460b      	mov	r3, r1
 800188e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001890:	78fb      	ldrb	r3, [r7, #3]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d00c      	beq.n	80018b0 <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001896:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800189a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800189e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80018a6:	68d1      	ldr	r1, [r2, #12]
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	430a      	orrs	r2, r1
 80018ac:	60da      	str	r2, [r3, #12]
 80018ae:	e00c      	b.n	80018ca <RCC_APB2PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 80018b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80018b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018bc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80018c0:	68d1      	ldr	r1, [r2, #12]
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	43d2      	mvns	r2, r2
 80018c6:	400a      	ands	r2, r1
 80018c8:	60da      	str	r2, [r3, #12]
  }
}
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	460b      	mov	r3, r1
 80018de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80018e0:	78fb      	ldrb	r3, [r7, #3]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d00c      	beq.n	8001900 <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 80018e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80018ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018f2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80018f6:	6911      	ldr	r1, [r2, #16]
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	430a      	orrs	r2, r1
 80018fc:	611a      	str	r2, [r3, #16]
 80018fe:	e00c      	b.n	800191a <RCC_APB1PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001900:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001904:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001908:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800190c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001910:	6911      	ldr	r1, [r2, #16]
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	43d2      	mvns	r2, r2
 8001916:	400a      	ands	r2, r1
 8001918:	611a      	str	r2, [r3, #16]
  }
}
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 800192e:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8001932:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8001936:	79fa      	ldrb	r2, [r7, #7]
 8001938:	601a      	str	r2, [r3, #0]
}
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 800194e:	234c      	movs	r3, #76	; 0x4c
 8001950:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8001954:	79fa      	ldrb	r2, [r7, #7]
 8001956:	601a      	str	r2, [r3, #0]
}
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop

08001964 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *   
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
 800196e:	f241 0307 	movw	r3, #4103	; 0x1007
 8001972:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001976:	79fa      	ldrb	r2, [r7, #7]
 8001978:	701a      	strb	r2, [r3, #0]
}
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *   
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8001984:	b480      	push	{r7}
 8001986:	b087      	sub	sp, #28
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 800198e:	2300      	movs	r3, #0
 8001990:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8001996:	2300      	movs	r3, #0
 8001998:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 800199a:	79fb      	ldrb	r3, [r7, #7]
 800199c:	095b      	lsrs	r3, r3, #5
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d106      	bne.n	80019b6 <RCC_GetFlagStatus+0x32>
  {
    statusreg = RCC->CR;
 80019a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	617b      	str	r3, [r7, #20]
 80019b4:	e00f      	b.n	80019d6 <RCC_GetFlagStatus+0x52>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d106      	bne.n	80019ca <RCC_GetFlagStatus+0x46>
  {
    statusreg = RCC->BDCR;
 80019bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80019c4:	6a1b      	ldr	r3, [r3, #32]
 80019c6:	617b      	str	r3, [r7, #20]
 80019c8:	e005      	b.n	80019d6 <RCC_GetFlagStatus+0x52>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 80019ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80019d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d4:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	f003 031f 	and.w	r3, r3, #31
 80019dc:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	697a      	ldr	r2, [r7, #20]
 80019e2:	fa22 f303 	lsr.w	r3, r2, r3
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d002      	beq.n	80019f4 <RCC_GetFlagStatus+0x70>
  {
    bitstatus = SET;
 80019ee:	2301      	movs	r3, #1
 80019f0:	74fb      	strb	r3, [r7, #19]
 80019f2:	e001      	b.n	80019f8 <RCC_GetFlagStatus+0x74>
  }
  else
  {
    bitstatus = RESET;
 80019f4:	2300      	movs	r3, #0
 80019f6:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
 80019f8:	7cfb      	ldrb	r3, [r7, #19]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	371c      	adds	r7, #28
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop

08001a08 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
 8001a0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a10:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a18:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a1e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001a22:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *   
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 8001a36:	2300      	movs	r3, #0
 8001a38:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8001a3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a3e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	79fb      	ldrb	r3, [r7, #7]
 8001a46:	4013      	ands	r3, r2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d002      	beq.n	8001a52 <RCC_GetITStatus+0x26>
  {
    bitstatus = SET;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	73fb      	strb	r3, [r7, #15]
 8001a50:	e001      	b.n	8001a56 <RCC_GetITStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8001a52:	2300      	movs	r3, #0
 8001a54:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
 8001a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <RCC_ClearITPendingBit>:
  *   
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8001a6e:	f241 030a 	movw	r3, #4106	; 0x100a
 8001a72:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a76:	79fa      	ldrb	r2, [r7, #7]
 8001a78:	701a      	strb	r2, [r3, #0]
}
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  if (GPIOx == GPIOA)
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a92:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d108      	bne.n	8001aac <GPIO_DeInit+0x28>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8001a9a:	2004      	movs	r0, #4
 8001a9c:	2101      	movs	r1, #1
 8001a9e:	f7ff fef1 	bl	8001884 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
 8001aa2:	2004      	movs	r0, #4
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	f7ff feed 	bl	8001884 <RCC_APB2PeriphResetCmd>
 8001aaa:	e060      	b.n	8001b6e <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOB)
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ab2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d108      	bne.n	8001acc <GPIO_DeInit+0x48>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8001aba:	2008      	movs	r0, #8
 8001abc:	2101      	movs	r1, #1
 8001abe:	f7ff fee1 	bl	8001884 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
 8001ac2:	2008      	movs	r0, #8
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	f7ff fedd 	bl	8001884 <RCC_APB2PeriphResetCmd>
 8001aca:	e050      	b.n	8001b6e <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOC)
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ad2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d108      	bne.n	8001aec <GPIO_DeInit+0x68>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8001ada:	2010      	movs	r0, #16
 8001adc:	2101      	movs	r1, #1
 8001ade:	f7ff fed1 	bl	8001884 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
 8001ae2:	2010      	movs	r0, #16
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	f7ff fecd 	bl	8001884 <RCC_APB2PeriphResetCmd>
 8001aea:	e040      	b.n	8001b6e <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOD)
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001af2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d108      	bne.n	8001b0c <GPIO_DeInit+0x88>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
 8001afa:	2020      	movs	r0, #32
 8001afc:	2101      	movs	r1, #1
 8001afe:	f7ff fec1 	bl	8001884 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
 8001b02:	2020      	movs	r0, #32
 8001b04:	2100      	movs	r1, #0
 8001b06:	f7ff febd 	bl	8001884 <RCC_APB2PeriphResetCmd>
 8001b0a:	e030      	b.n	8001b6e <GPIO_DeInit+0xea>
  }    
  else if (GPIOx == GPIOE)
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b12:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d108      	bne.n	8001b2c <GPIO_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
 8001b1a:	2040      	movs	r0, #64	; 0x40
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	f7ff feb1 	bl	8001884 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
 8001b22:	2040      	movs	r0, #64	; 0x40
 8001b24:	2100      	movs	r1, #0
 8001b26:	f7ff fead 	bl	8001884 <RCC_APB2PeriphResetCmd>
 8001b2a:	e020      	b.n	8001b6e <GPIO_DeInit+0xea>
  } 
  else if (GPIOx == GPIOF)
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001b32:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d108      	bne.n	8001b4c <GPIO_DeInit+0xc8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
 8001b3a:	2080      	movs	r0, #128	; 0x80
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	f7ff fea1 	bl	8001884 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
 8001b42:	2080      	movs	r0, #128	; 0x80
 8001b44:	2100      	movs	r1, #0
 8001b46:	f7ff fe9d 	bl	8001884 <RCC_APB2PeriphResetCmd>
 8001b4a:	e010      	b.n	8001b6e <GPIO_DeInit+0xea>
  }
  else
  {
    if (GPIOx == GPIOG)
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b52:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d109      	bne.n	8001b6e <GPIO_DeInit+0xea>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
 8001b5a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001b5e:	2101      	movs	r1, #1
 8001b60:	f7ff fe90 	bl	8001884 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
 8001b64:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001b68:	2100      	movs	r1, #0
 8001b6a:	f7ff fe8b 	bl	8001884 <RCC_APB2PeriphResetCmd>
    }
  }
}
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
 8001b78:	2001      	movs	r0, #1
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	f7ff fe82 	bl	8001884 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
 8001b80:	2001      	movs	r0, #1
 8001b82:	2100      	movs	r1, #0
 8001b84:	f7ff fe7e 	bl	8001884 <RCC_APB2PeriphResetCmd>
}
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop

08001b8c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *   contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b089      	sub	sp, #36	; 0x24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8001b96:	2300      	movs	r3, #0
 8001b98:	61fb      	str	r3, [r7, #28]
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	613b      	str	r3, [r7, #16]
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61bb      	str	r3, [r7, #24]
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]
 8001baa:	2300      	movs	r3, #0
 8001bac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	78db      	ldrb	r3, [r3, #3]
 8001bb2:	f003 030f 	and.w	r3, r3, #15
 8001bb6:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	78db      	ldrb	r3, [r3, #3]
 8001bbc:	f003 0310 	and.w	r3, r3, #16
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d004      	beq.n	8001bce <GPIO_Init+0x42>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	789b      	ldrb	r3, [r3, #2]
 8001bc8:	69fa      	ldr	r2, [r7, #28]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	881b      	ldrh	r3, [r3, #0]
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d044      	beq.n	8001c62 <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001bde:	2300      	movs	r3, #0
 8001be0:	61bb      	str	r3, [r7, #24]
 8001be2:	e038      	b.n	8001c56 <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	2201      	movs	r2, #1
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d126      	bne.n	8001c50 <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	220f      	movs	r2, #15
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	43db      	mvns	r3, r3
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	69fa      	ldr	r2, [r7, #28]
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	697a      	ldr	r2, [r7, #20]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	78db      	ldrb	r3, [r3, #3]
 8001c2e:	2b28      	cmp	r3, #40	; 0x28
 8001c30:	d105      	bne.n	8001c3e <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	2201      	movs	r2, #1
 8001c36:	409a      	lsls	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	615a      	str	r2, [r3, #20]
 8001c3c:	e008      	b.n	8001c50 <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	78db      	ldrb	r3, [r3, #3]
 8001c42:	2b48      	cmp	r3, #72	; 0x48
 8001c44:	d104      	bne.n	8001c50 <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	409a      	lsls	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	3301      	adds	r3, #1
 8001c54:	61bb      	str	r3, [r7, #24]
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	2b07      	cmp	r3, #7
 8001c5a:	d9c3      	bls.n	8001be4 <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	697a      	ldr	r2, [r7, #20]
 8001c60:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	881b      	ldrh	r3, [r3, #0]
 8001c66:	2bff      	cmp	r3, #255	; 0xff
 8001c68:	d946      	bls.n	8001cf8 <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001c70:	2300      	movs	r3, #0
 8001c72:	61bb      	str	r3, [r7, #24]
 8001c74:	e03a      	b.n	8001cec <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	3308      	adds	r3, #8
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	881b      	ldrh	r3, [r3, #0]
 8001c86:	461a      	mov	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d127      	bne.n	8001ce6 <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	220f      	movs	r2, #15
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	4013      	ands	r3, r2
 8001cae:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	69fa      	ldr	r2, [r7, #28]
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	78db      	ldrb	r3, [r3, #3]
 8001cc2:	2b28      	cmp	r3, #40	; 0x28
 8001cc4:	d105      	bne.n	8001cd2 <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	3308      	adds	r3, #8
 8001cca:	2201      	movs	r2, #1
 8001ccc:	409a      	lsls	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	78db      	ldrb	r3, [r3, #3]
 8001cd6:	2b48      	cmp	r3, #72	; 0x48
 8001cd8:	d105      	bne.n	8001ce6 <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	3308      	adds	r3, #8
 8001cde:	2201      	movs	r2, #1
 8001ce0:	409a      	lsls	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	61bb      	str	r3, [r7, #24]
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	2b07      	cmp	r3, #7
 8001cf0:	d9c1      	bls.n	8001c76 <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	697a      	ldr	r2, [r7, #20]
 8001cf6:	605a      	str	r2, [r3, #4]
  }
}
 8001cf8:	3724      	adds	r7, #36	; 0x24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop

08001d04 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *   be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d12:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2202      	movs	r2, #2
 8001d18:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2204      	movs	r2, #4
 8001d1e:	70da      	strb	r2, [r3, #3]
}
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop

08001d2c <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	460b      	mov	r3, r1
 8001d36:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	887b      	ldrh	r3, [r7, #2]
 8001d42:	4013      	ands	r3, r2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d002      	beq.n	8001d4e <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	73fb      	strb	r3, [r7, #15]
 8001d4c:	e001      	b.n	8001d52 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3714      	adds	r7, #20
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->IDR);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	b29b      	uxth	r3, r3
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop

08001d7c <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	460b      	mov	r3, r1
 8001d86:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68da      	ldr	r2, [r3, #12]
 8001d90:	887b      	ldrh	r3, [r7, #2]
 8001d92:	4013      	ands	r3, r2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d002      	beq.n	8001d9e <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	73fb      	strb	r3, [r7, #15]
 8001d9c:	e001      	b.n	8001da2 <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((uint16_t)GPIOx->ODR);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	b29b      	uxth	r3, r3
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop

08001dcc <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8001dd8:	887a      	ldrh	r2, [r7, #2]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	611a      	str	r2, [r3, #16]
}
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	460b      	mov	r3, r1
 8001df2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8001df4:	887a      	ldrh	r2, [r7, #2]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	615a      	str	r2, [r3, #20]
}
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	460a      	mov	r2, r1
 8001e10:	807a      	strh	r2, [r7, #2]
 8001e12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 8001e14:	787b      	ldrb	r3, [r7, #1]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e1a:	887a      	ldrh	r2, [r7, #2]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	611a      	str	r2, [r3, #16]
 8001e20:	e002      	b.n	8001e28 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
 8001e22:	887a      	ldrh	r2, [r7, #2]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	615a      	str	r2, [r3, #20]
  }
}
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop

08001e34 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
 8001e40:	887a      	ldrh	r2, [r7, #2]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	60da      	str	r2, [r3, #12]
}
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	460b      	mov	r3, r1
 8001e5a:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
 8001e5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e60:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
 8001e62:	887b      	ldrh	r3, [r7, #2]
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8001e70:	887a      	ldrh	r2, [r7, #2]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	68fa      	ldr	r2, [r7, #12]
 8001e7a:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	60fb      	str	r3, [r7, #12]
}
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop

08001e94 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	71fa      	strb	r2, [r7, #7]
 8001ea0:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
 8001eba:	79fb      	ldrb	r3, [r7, #7]
 8001ebc:	011b      	lsls	r3, r3, #4
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
 8001ec4:	79bb      	ldrb	r3, [r7, #6]
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	601a      	str	r2, [r3, #0]
}
 8001ed6:	3714      	adds	r7, #20
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
 8001eea:	231c      	movs	r3, #28
 8001eec:	f2c4 2320 	movt	r3, #16928	; 0x4220
 8001ef0:	79fa      	ldrb	r2, [r7, #7]
 8001ef2:	601a      	str	r2, [r3, #0]
}
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop

08001f00 <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b087      	sub	sp, #28
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	613b      	str	r3, [r7, #16]
 8001f10:	2300      	movs	r3, #0
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	2300      	movs	r3, #0
 8001f16:	617b      	str	r3, [r7, #20]
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	da05      	bge.n	8001f2e <GPIO_PinRemapConfig+0x2e>
  {
    tmpreg = AFIO->MAPR2;
 8001f22:	2300      	movs	r3, #0
 8001f24:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	617b      	str	r3, [r7, #20]
 8001f2c:	e004      	b.n	8001f38 <GPIO_PinRemapConfig+0x38>
  }
  else
  {
    tmpreg = AFIO->MAPR;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001f3e:	0c1b      	lsrs	r3, r3, #16
 8001f40:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001f4e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001f52:	d10e      	bne.n	8001f72 <GPIO_PinRemapConfig+0x72>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001f5a:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001f62:	2200      	movs	r2, #0
 8001f64:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8001f68:	6852      	ldr	r2, [r2, #4]
 8001f6a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f6e:	605a      	str	r2, [r3, #4]
 8001f70:	e021      	b.n	8001fb6 <GPIO_PinRemapConfig+0xb6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d00e      	beq.n	8001f9a <GPIO_PinRemapConfig+0x9a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	2203      	movs	r2, #3
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8001f96:	617b      	str	r3, [r7, #20]
 8001f98:	e00d      	b.n	8001fb6 <GPIO_PinRemapConfig+0xb6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	0d5b      	lsrs	r3, r3, #21
 8001f9e:	011b      	lsls	r3, r3, #4
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	4013      	ands	r3, r2
 8001fac:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8001fb4:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
 8001fb6:	78fb      	ldrb	r3, [r7, #3]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d008      	beq.n	8001fce <GPIO_PinRemapConfig+0xce>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	0d5b      	lsrs	r3, r3, #21
 8001fc0:	011b      	lsls	r3, r3, #4
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	697a      	ldr	r2, [r7, #20]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	da05      	bge.n	8001fe0 <GPIO_PinRemapConfig+0xe0>
  {
    AFIO->MAPR2 = tmpreg;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001fda:	697a      	ldr	r2, [r7, #20]
 8001fdc:	61da      	str	r2, [r3, #28]
 8001fde:	e004      	b.n	8001fea <GPIO_PinRemapConfig+0xea>
  }
  else
  {
    AFIO->MAPR = tmpreg;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001fe6:	697a      	ldr	r2, [r7, #20]
 8001fe8:	605a      	str	r2, [r3, #4]
  }  
}
 8001fea:	371c      	adds	r7, #28
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 8001ff4:	b490      	push	{r4, r7}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	71fa      	strb	r2, [r7, #7]
 8002000:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8002002:	2300      	movs	r3, #0
 8002004:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 8002006:	79bb      	ldrb	r3, [r7, #6]
 8002008:	f003 0303 	and.w	r3, r3, #3
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	220f      	movs	r2, #15
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8002016:	2300      	movs	r3, #0
 8002018:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800201c:	79ba      	ldrb	r2, [r7, #6]
 800201e:	0892      	lsrs	r2, r2, #2
 8002020:	b2d2      	uxtb	r2, r2
 8002022:	4610      	mov	r0, r2
 8002024:	2200      	movs	r2, #0
 8002026:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800202a:	79b9      	ldrb	r1, [r7, #6]
 800202c:	0889      	lsrs	r1, r1, #2
 800202e:	b2c9      	uxtb	r1, r1
 8002030:	3102      	adds	r1, #2
 8002032:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	43d2      	mvns	r2, r2
 800203a:	4011      	ands	r1, r2
 800203c:	1c82      	adds	r2, r0, #2
 800203e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 8002042:	2300      	movs	r3, #0
 8002044:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002048:	79ba      	ldrb	r2, [r7, #6]
 800204a:	0892      	lsrs	r2, r2, #2
 800204c:	b2d2      	uxtb	r2, r2
 800204e:	4610      	mov	r0, r2
 8002050:	2200      	movs	r2, #0
 8002052:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8002056:	79b9      	ldrb	r1, [r7, #6]
 8002058:	0889      	lsrs	r1, r1, #2
 800205a:	b2c9      	uxtb	r1, r1
 800205c:	3102      	adds	r1, #2
 800205e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8002062:	79fc      	ldrb	r4, [r7, #7]
 8002064:	79ba      	ldrb	r2, [r7, #6]
 8002066:	f002 0203 	and.w	r2, r2, #3
 800206a:	0092      	lsls	r2, r2, #2
 800206c:	fa04 f202 	lsl.w	r2, r4, r2
 8002070:	4311      	orrs	r1, r2
 8002072:	1c82      	adds	r2, r0, #2
 8002074:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bc90      	pop	{r4, r7}
 800207e:	4770      	bx	lr

08002080 <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode    
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface) 
{ 
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface)); 

  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface; 
 8002088:	23dc      	movs	r3, #220	; 0xdc
 800208a:	f2c4 2320 	movt	r3, #16928	; 0x4220
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	601a      	str	r2, [r3, #0]
}
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
 80020a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
 80020ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020b0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80020b4:	2200      	movs	r2, #0
 80020b6:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000; 
 80020b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020bc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80020c0:	2200      	movs	r2, #0
 80020c2:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000; 
 80020c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020c8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80020cc:	2200      	movs	r2, #0
 80020ce:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
 80020d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020d4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80020d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020dc:	f2c0 020f 	movt	r2, #15
 80020e0:	615a      	str	r2, [r3, #20]
}
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop

080020ec <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *   that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80020f4:	2300      	movs	r3, #0
 80020f6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 80020f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020fc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002100:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	799b      	ldrb	r3, [r3, #6]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d074      	beq.n	80021f4 <EXTI_Init+0x108>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 800210a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800210e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002112:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002116:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800211a:	6811      	ldr	r1, [r2, #0]
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	6812      	ldr	r2, [r2, #0]
 8002120:	43d2      	mvns	r2, r2
 8002122:	400a      	ands	r2, r1
 8002124:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8002126:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800212a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800212e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002132:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8002136:	6851      	ldr	r1, [r2, #4]
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	6812      	ldr	r2, [r2, #0]
 800213c:	43d2      	mvns	r2, r2
 800213e:	400a      	ands	r2, r1
 8002140:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	791b      	ldrb	r3, [r3, #4]
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	4413      	add	r3, r2
 800214a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	6811      	ldr	r1, [r2, #0]
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6812      	ldr	r2, [r2, #0]
 8002156:	430a      	orrs	r2, r1
 8002158:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 800215a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800215e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002162:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002166:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800216a:	6891      	ldr	r1, [r2, #8]
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	6812      	ldr	r2, [r2, #0]
 8002170:	43d2      	mvns	r2, r2
 8002172:	400a      	ands	r2, r1
 8002174:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8002176:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800217a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800217e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002182:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8002186:	68d1      	ldr	r1, [r2, #12]
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	6812      	ldr	r2, [r2, #0]
 800218c:	43d2      	mvns	r2, r2
 800218e:	400a      	ands	r2, r1
 8002190:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	795b      	ldrb	r3, [r3, #5]
 8002196:	2b10      	cmp	r3, #16
 8002198:	d11a      	bne.n	80021d0 <EXTI_Init+0xe4>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 800219a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800219e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80021a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021a6:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80021aa:	6891      	ldr	r1, [r2, #8]
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	6812      	ldr	r2, [r2, #0]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 80021b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021b8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80021bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021c0:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80021c4:	68d1      	ldr	r1, [r2, #12]
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	6812      	ldr	r2, [r2, #0]
 80021ca:	430a      	orrs	r2, r1
 80021cc:	60da      	str	r2, [r3, #12]
 80021ce:	e01e      	b.n	800220e <EXTI_Init+0x122>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 80021d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021d4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80021d8:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	795b      	ldrb	r3, [r3, #5]
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	4413      	add	r3, r2
 80021e2:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	6811      	ldr	r1, [r2, #0]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	6812      	ldr	r2, [r2, #0]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	e00c      	b.n	800220e <EXTI_Init+0x122>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	791b      	ldrb	r3, [r3, #4]
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	4413      	add	r3, r2
 80021fc:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	6811      	ldr	r1, [r2, #0]
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	6812      	ldr	r2, [r2, #0]
 8002208:	43d2      	mvns	r2, r2
 800220a:	400a      	ands	r2, r1
 800220c:	601a      	str	r2, [r3, #0]
  }
}
 800220e:	3714      	adds	r7, #20
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *   be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LineNone;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	220c      	movs	r2, #12
 8002230:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	719a      	strb	r2, [r3, #6]
}
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop

08002244 <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
 800224c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002250:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002254:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002258:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800225c:	6911      	ldr	r1, [r2, #16]
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	430a      	orrs	r2, r1
 8002262:	611a      	str	r2, [r3, #16]
}
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop

08002270 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8002278:	2300      	movs	r3, #0
 800227a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 800227c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002280:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002284:	695a      	ldr	r2, [r3, #20]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4013      	ands	r3, r2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d002      	beq.n	8002294 <EXTI_GetFlagStatus+0x24>
  {
    bitstatus = SET;
 800228e:	2301      	movs	r3, #1
 8002290:	73fb      	strb	r3, [r7, #15]
 8002292:	e001      	b.n	8002298 <EXTI_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
 8002294:	2300      	movs	r3, #0
 8002296:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002298:	7bfb      	ldrb	r3, [r7, #15]
}
 800229a:	4618      	mov	r0, r3
 800229c:	3714      	adds	r7, #20
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop

080022a8 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80022b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022b4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	615a      	str	r2, [r3, #20]
}
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop

080022c8 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 80022d0:	2300      	movs	r3, #0
 80022d2:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 80022d4:	2300      	movs	r3, #0
 80022d6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 80022d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4013      	ands	r3, r2
 80022e6:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 80022e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022ec:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80022f0:	695a      	ldr	r2, [r3, #20]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4013      	ands	r3, r2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d005      	beq.n	8002306 <EXTI_GetITStatus+0x3e>
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d002      	beq.n	8002306 <EXTI_GetITStatus+0x3e>
  {
    bitstatus = SET;
 8002300:	2301      	movs	r3, #1
 8002302:	73fb      	strb	r3, [r7, #15]
 8002304:	e001      	b.n	800230a <EXTI_GetITStatus+0x42>
  }
  else
  {
    bitstatus = RESET;
 8002306:	2300      	movs	r3, #0
 8002308:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800230a:	7bfb      	ldrb	r3, [r7, #15]
}
 800230c:	4618      	mov	r0, r3
 800230e:	3714      	adds	r7, #20
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8002320:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002324:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	615a      	str	r2, [r3, #20]
}
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop

08002338 <TIM_DeInit>:
  * @brief  Deinitializes the TIMx peripheral registers to their default reset values.
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @retval None
  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002346:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800234a:	429a      	cmp	r2, r3
 800234c:	d10a      	bne.n	8002364 <TIM_DeInit+0x2c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 800234e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002352:	2101      	movs	r1, #1
 8002354:	f7ff fa96 	bl	8001884 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8002358:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800235c:	2100      	movs	r1, #0
 800235e:	f7ff fa91 	bl	8001884 <RCC_APB2PeriphResetCmd>
 8002362:	e10b      	b.n	800257c <TIM_DeInit+0x244>
  }     
  else if (TIMx == TIM2)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800236a:	d108      	bne.n	800237e <TIM_DeInit+0x46>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 800236c:	2001      	movs	r0, #1
 800236e:	2101      	movs	r1, #1
 8002370:	f7ff fab0 	bl	80018d4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8002374:	2001      	movs	r0, #1
 8002376:	2100      	movs	r1, #0
 8002378:	f7ff faac 	bl	80018d4 <RCC_APB1PeriphResetCmd>
 800237c:	e0fe      	b.n	800257c <TIM_DeInit+0x244>
  }
  else if (TIMx == TIM3)
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002384:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002388:	429a      	cmp	r2, r3
 800238a:	d108      	bne.n	800239e <TIM_DeInit+0x66>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 800238c:	2002      	movs	r0, #2
 800238e:	2101      	movs	r1, #1
 8002390:	f7ff faa0 	bl	80018d4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8002394:	2002      	movs	r0, #2
 8002396:	2100      	movs	r1, #0
 8002398:	f7ff fa9c 	bl	80018d4 <RCC_APB1PeriphResetCmd>
 800239c:	e0ee      	b.n	800257c <TIM_DeInit+0x244>
  }
  else if (TIMx == TIM4)
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023a4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d108      	bne.n	80023be <TIM_DeInit+0x86>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 80023ac:	2004      	movs	r0, #4
 80023ae:	2101      	movs	r1, #1
 80023b0:	f7ff fa90 	bl	80018d4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 80023b4:	2004      	movs	r0, #4
 80023b6:	2100      	movs	r1, #0
 80023b8:	f7ff fa8c 	bl	80018d4 <RCC_APB1PeriphResetCmd>
 80023bc:	e0de      	b.n	800257c <TIM_DeInit+0x244>
  } 
  else if (TIMx == TIM5)
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80023c4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d108      	bne.n	80023de <TIM_DeInit+0xa6>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 80023cc:	2008      	movs	r0, #8
 80023ce:	2101      	movs	r1, #1
 80023d0:	f7ff fa80 	bl	80018d4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 80023d4:	2008      	movs	r0, #8
 80023d6:	2100      	movs	r1, #0
 80023d8:	f7ff fa7c 	bl	80018d4 <RCC_APB1PeriphResetCmd>
 80023dc:	e0ce      	b.n	800257c <TIM_DeInit+0x244>
  } 
  else if (TIMx == TIM6)
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023e4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d108      	bne.n	80023fe <TIM_DeInit+0xc6>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 80023ec:	2010      	movs	r0, #16
 80023ee:	2101      	movs	r1, #1
 80023f0:	f7ff fa70 	bl	80018d4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 80023f4:	2010      	movs	r0, #16
 80023f6:	2100      	movs	r1, #0
 80023f8:	f7ff fa6c 	bl	80018d4 <RCC_APB1PeriphResetCmd>
 80023fc:	e0be      	b.n	800257c <TIM_DeInit+0x244>
  } 
  else if (TIMx == TIM7)
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002404:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002408:	429a      	cmp	r2, r3
 800240a:	d108      	bne.n	800241e <TIM_DeInit+0xe6>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 800240c:	2020      	movs	r0, #32
 800240e:	2101      	movs	r1, #1
 8002410:	f7ff fa60 	bl	80018d4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8002414:	2020      	movs	r0, #32
 8002416:	2100      	movs	r1, #0
 8002418:	f7ff fa5c 	bl	80018d4 <RCC_APB1PeriphResetCmd>
 800241c:	e0ae      	b.n	800257c <TIM_DeInit+0x244>
  } 
  else if (TIMx == TIM8)
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8002424:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002428:	429a      	cmp	r2, r3
 800242a:	d10a      	bne.n	8002442 <TIM_DeInit+0x10a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 800242c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002430:	2101      	movs	r1, #1
 8002432:	f7ff fa27 	bl	8001884 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
 8002436:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800243a:	2100      	movs	r1, #0
 800243c:	f7ff fa22 	bl	8001884 <RCC_APB2PeriphResetCmd>
 8002440:	e09c      	b.n	800257c <TIM_DeInit+0x244>
  }
  else if (TIMx == TIM9)
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 8002448:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800244c:	429a      	cmp	r2, r3
 800244e:	d10a      	bne.n	8002466 <TIM_DeInit+0x12e>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 8002450:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002454:	2101      	movs	r1, #1
 8002456:	f7ff fa15 	bl	8001884 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 800245a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800245e:	2100      	movs	r1, #0
 8002460:	f7ff fa10 	bl	8001884 <RCC_APB2PeriphResetCmd>
 8002464:	e08a      	b.n	800257c <TIM_DeInit+0x244>
   }  
  else if (TIMx == TIM10)
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800246c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002470:	429a      	cmp	r2, r3
 8002472:	d10a      	bne.n	800248a <TIM_DeInit+0x152>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 8002474:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002478:	2101      	movs	r1, #1
 800247a:	f7ff fa03 	bl	8001884 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 800247e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002482:	2100      	movs	r1, #0
 8002484:	f7ff f9fe 	bl	8001884 <RCC_APB2PeriphResetCmd>
 8002488:	e078      	b.n	800257c <TIM_DeInit+0x244>
  }  
  else if (TIMx == TIM11) 
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8002490:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002494:	429a      	cmp	r2, r3
 8002496:	d10a      	bne.n	80024ae <TIM_DeInit+0x176>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 8002498:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800249c:	2101      	movs	r1, #1
 800249e:	f7ff f9f1 	bl	8001884 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 80024a2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80024a6:	2100      	movs	r1, #0
 80024a8:	f7ff f9ec 	bl	8001884 <RCC_APB2PeriphResetCmd>
 80024ac:	e066      	b.n	800257c <TIM_DeInit+0x244>
  }  
  else if (TIMx == TIM12)
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80024b4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d108      	bne.n	80024ce <TIM_DeInit+0x196>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 80024bc:	2040      	movs	r0, #64	; 0x40
 80024be:	2101      	movs	r1, #1
 80024c0:	f7ff fa08 	bl	80018d4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 80024c4:	2040      	movs	r0, #64	; 0x40
 80024c6:	2100      	movs	r1, #0
 80024c8:	f7ff fa04 	bl	80018d4 <RCC_APB1PeriphResetCmd>
 80024cc:	e056      	b.n	800257c <TIM_DeInit+0x244>
  }  
  else if (TIMx == TIM13) 
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80024d4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80024d8:	429a      	cmp	r2, r3
 80024da:	d108      	bne.n	80024ee <TIM_DeInit+0x1b6>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 80024dc:	2080      	movs	r0, #128	; 0x80
 80024de:	2101      	movs	r1, #1
 80024e0:	f7ff f9f8 	bl	80018d4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 80024e4:	2080      	movs	r0, #128	; 0x80
 80024e6:	2100      	movs	r1, #0
 80024e8:	f7ff f9f4 	bl	80018d4 <RCC_APB1PeriphResetCmd>
 80024ec:	e046      	b.n	800257c <TIM_DeInit+0x244>
  }
  else if (TIMx == TIM14) 
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024f4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d10a      	bne.n	8002512 <TIM_DeInit+0x1da>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 80024fc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002500:	2101      	movs	r1, #1
 8002502:	f7ff f9e7 	bl	80018d4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);  
 8002506:	f44f 7080 	mov.w	r0, #256	; 0x100
 800250a:	2100      	movs	r1, #0
 800250c:	f7ff f9e2 	bl	80018d4 <RCC_APB1PeriphResetCmd>
 8002510:	e034      	b.n	800257c <TIM_DeInit+0x244>
  }        
  else if (TIMx == TIM15)
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002518:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800251c:	429a      	cmp	r2, r3
 800251e:	d10a      	bne.n	8002536 <TIM_DeInit+0x1fe>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
 8002520:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002524:	2101      	movs	r1, #1
 8002526:	f7ff f9ad 	bl	8001884 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);
 800252a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800252e:	2100      	movs	r1, #0
 8002530:	f7ff f9a8 	bl	8001884 <RCC_APB2PeriphResetCmd>
 8002534:	e022      	b.n	800257c <TIM_DeInit+0x244>
  } 
  else if (TIMx == TIM16)
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 800253c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002540:	429a      	cmp	r2, r3
 8002542:	d10a      	bne.n	800255a <TIM_DeInit+0x222>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
 8002544:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002548:	2101      	movs	r1, #1
 800254a:	f7ff f99b 	bl	8001884 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);
 800254e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002552:	2100      	movs	r1, #0
 8002554:	f7ff f996 	bl	8001884 <RCC_APB2PeriphResetCmd>
 8002558:	e010      	b.n	800257c <TIM_DeInit+0x244>
  } 
  else
  {
    if (TIMx == TIM17)
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8002560:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002564:	429a      	cmp	r2, r3
 8002566:	d109      	bne.n	800257c <TIM_DeInit+0x244>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
 8002568:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800256c:	2101      	movs	r1, #1
 800256e:	f7ff f989 	bl	8001884 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
 8002572:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002576:	2100      	movs	r1, #0
 8002578:	f7ff f984 	bl	8001884 <RCC_APB2PeriphResetCmd>
    }  
  }
}
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop

08002584 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef
  *   structure that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800258e:	2300      	movs	r3, #0
 8002590:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	881b      	ldrh	r3, [r3, #0]
 8002596:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800259e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d01f      	beq.n	80025e6 <TIM_TimeBaseInit+0x62>
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 80025ac:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d018      	beq.n	80025e6 <TIM_TimeBaseInit+0x62>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ba:	d014      	beq.n	80025e6 <TIM_TimeBaseInit+0x62>
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025c2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d00d      	beq.n	80025e6 <TIM_TimeBaseInit+0x62>
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025d0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d006      	beq.n	80025e6 <TIM_TimeBaseInit+0x62>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80025de:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d108      	bne.n	80025f8 <TIM_TimeBaseInit+0x74>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 80025e6:	89fb      	ldrh	r3, [r7, #14]
 80025e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ec:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	885a      	ldrh	r2, [r3, #2]
 80025f2:	89fb      	ldrh	r3, [r7, #14]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025fe:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002602:	429a      	cmp	r2, r3
 8002604:	d00f      	beq.n	8002626 <TIM_TimeBaseInit+0xa2>
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800260c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002610:	429a      	cmp	r2, r3
 8002612:	d008      	beq.n	8002626 <TIM_TimeBaseInit+0xa2>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8002614:	89fb      	ldrh	r3, [r7, #14]
 8002616:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800261a:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	88da      	ldrh	r2, [r3, #6]
 8002620:	89fb      	ldrh	r3, [r7, #14]
 8002622:	4313      	orrs	r3, r2
 8002624:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	89fa      	ldrh	r2, [r7, #14]
 800262a:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	889a      	ldrh	r2, [r3, #4]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	881a      	ldrh	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002642:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002646:	429a      	cmp	r2, r3
 8002648:	d01b      	beq.n	8002682 <TIM_TimeBaseInit+0xfe>
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8002650:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002654:	429a      	cmp	r2, r3
 8002656:	d014      	beq.n	8002682 <TIM_TimeBaseInit+0xfe>
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800265e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002662:	429a      	cmp	r2, r3
 8002664:	d00d      	beq.n	8002682 <TIM_TimeBaseInit+0xfe>
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 800266c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002670:	429a      	cmp	r2, r3
 8002672:	d006      	beq.n	8002682 <TIM_TimeBaseInit+0xfe>
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800267a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800267e:	429a      	cmp	r2, r3
 8002680:	d104      	bne.n	800268c <TIM_TimeBaseInit+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	7a1b      	ldrb	r3, [r3, #8]
 8002686:	461a      	mov	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	829a      	strh	r2, [r3, #20]
}
 8002692:	3714      	adds	r7, #20
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80026a6:	2300      	movs	r3, #0
 80026a8:	817b      	strh	r3, [r7, #10]
 80026aa:	2300      	movs	r3, #0
 80026ac:	81fb      	strh	r3, [r7, #14]
 80026ae:	2300      	movs	r3, #0
 80026b0:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	8c1b      	ldrh	r3, [r3, #32]
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	f023 0301 	bic.w	r3, r3, #1
 80026bc:	b29a      	uxth	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	841a      	strh	r2, [r3, #32]
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	8c1b      	ldrh	r3, [r3, #32]
 80026c6:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	889b      	ldrh	r3, [r3, #4]
 80026cc:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	8b1b      	ldrh	r3, [r3, #24]
 80026d2:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
 80026d4:	897b      	ldrh	r3, [r7, #10]
 80026d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026da:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 80026dc:	897b      	ldrh	r3, [r7, #10]
 80026de:	f023 0303 	bic.w	r3, r3, #3
 80026e2:	817b      	strh	r3, [r7, #10]

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	881a      	ldrh	r2, [r3, #0]
 80026e8:	897b      	ldrh	r3, [r7, #10]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 80026ee:	89fb      	ldrh	r3, [r7, #14]
 80026f0:	f023 0302 	bic.w	r3, r3, #2
 80026f4:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	891a      	ldrh	r2, [r3, #8]
 80026fa:	89fb      	ldrh	r3, [r7, #14]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	885a      	ldrh	r2, [r3, #2]
 8002704:	89fb      	ldrh	r3, [r7, #14]
 8002706:	4313      	orrs	r3, r2
 8002708:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002710:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002714:	429a      	cmp	r2, r3
 8002716:	d01b      	beq.n	8002750 <TIM_OC1Init+0xb4>
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 800271e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002722:	429a      	cmp	r2, r3
 8002724:	d014      	beq.n	8002750 <TIM_OC1Init+0xb4>
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800272c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002730:	429a      	cmp	r2, r3
 8002732:	d00d      	beq.n	8002750 <TIM_OC1Init+0xb4>
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 800273a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800273e:	429a      	cmp	r2, r3
 8002740:	d006      	beq.n	8002750 <TIM_OC1Init+0xb4>
     (TIMx == TIM16)|| (TIMx == TIM17))
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8002748:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800274c:	429a      	cmp	r2, r3
 800274e:	d123      	bne.n	8002798 <TIM_OC1Init+0xfc>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 8002750:	89fb      	ldrh	r3, [r7, #14]
 8002752:	f023 0308 	bic.w	r3, r3, #8
 8002756:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	895a      	ldrh	r2, [r3, #10]
 800275c:	89fb      	ldrh	r3, [r7, #14]
 800275e:	4313      	orrs	r3, r2
 8002760:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 8002762:	89fb      	ldrh	r3, [r7, #14]
 8002764:	f023 0304 	bic.w	r3, r3, #4
 8002768:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	889a      	ldrh	r2, [r3, #4]
 800276e:	89fb      	ldrh	r3, [r7, #14]
 8002770:	4313      	orrs	r3, r2
 8002772:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
 8002774:	89bb      	ldrh	r3, [r7, #12]
 8002776:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800277a:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 800277c:	89bb      	ldrh	r3, [r7, #12]
 800277e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002782:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	899a      	ldrh	r2, [r3, #12]
 8002788:	89bb      	ldrh	r3, [r7, #12]
 800278a:	4313      	orrs	r3, r2
 800278c:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	89da      	ldrh	r2, [r3, #14]
 8002792:	89bb      	ldrh	r3, [r7, #12]
 8002794:	4313      	orrs	r3, r2
 8002796:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	89ba      	ldrh	r2, [r7, #12]
 800279c:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	897a      	ldrh	r2, [r7, #10]
 80027a2:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	88da      	ldrh	r2, [r3, #6]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	869a      	strh	r2, [r3, #52]	; 0x34
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	89fa      	ldrh	r2, [r7, #14]
 80027b0:	841a      	strh	r2, [r3, #32]
}
 80027b2:	3714      	adds	r7, #20
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80027c6:	2300      	movs	r3, #0
 80027c8:	817b      	strh	r3, [r7, #10]
 80027ca:	2300      	movs	r3, #0
 80027cc:	81fb      	strh	r3, [r7, #14]
 80027ce:	2300      	movs	r3, #0
 80027d0:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
   /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	8c1b      	ldrh	r3, [r3, #32]
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	f023 0310 	bic.w	r3, r3, #16
 80027dc:	b29a      	uxth	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	8c1b      	ldrh	r3, [r3, #32]
 80027e6:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	889b      	ldrh	r3, [r3, #4]
 80027ec:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	8b1b      	ldrh	r3, [r3, #24]
 80027f2:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
 80027f4:	897b      	ldrh	r3, [r7, #10]
 80027f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027fa:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
 80027fc:	897b      	ldrh	r3, [r7, #10]
 80027fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002802:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	021b      	lsls	r3, r3, #8
 800280a:	b29a      	uxth	r2, r3
 800280c:	897b      	ldrh	r3, [r7, #10]
 800280e:	4313      	orrs	r3, r2
 8002810:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 8002812:	89fb      	ldrh	r3, [r7, #14]
 8002814:	f023 0320 	bic.w	r3, r3, #32
 8002818:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	891b      	ldrh	r3, [r3, #8]
 800281e:	011b      	lsls	r3, r3, #4
 8002820:	b29a      	uxth	r2, r3
 8002822:	89fb      	ldrh	r3, [r7, #14]
 8002824:	4313      	orrs	r3, r2
 8002826:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	885b      	ldrh	r3, [r3, #2]
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	b29a      	uxth	r2, r3
 8002830:	89fb      	ldrh	r3, [r7, #14]
 8002832:	4313      	orrs	r3, r2
 8002834:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800283c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002840:	429a      	cmp	r2, r3
 8002842:	d006      	beq.n	8002852 <TIM_OC2Init+0x96>
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 800284a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800284e:	429a      	cmp	r2, r3
 8002850:	d12b      	bne.n	80028aa <TIM_OC2Init+0xee>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
 8002852:	89fb      	ldrh	r3, [r7, #14]
 8002854:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002858:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	895b      	ldrh	r3, [r3, #10]
 800285e:	011b      	lsls	r3, r3, #4
 8002860:	b29a      	uxth	r2, r3
 8002862:	89fb      	ldrh	r3, [r7, #14]
 8002864:	4313      	orrs	r3, r2
 8002866:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
 8002868:	89fb      	ldrh	r3, [r7, #14]
 800286a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800286e:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	889b      	ldrh	r3, [r3, #4]
 8002874:	011b      	lsls	r3, r3, #4
 8002876:	b29a      	uxth	r2, r3
 8002878:	89fb      	ldrh	r3, [r7, #14]
 800287a:	4313      	orrs	r3, r2
 800287c:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
 800287e:	89bb      	ldrh	r3, [r7, #12]
 8002880:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002884:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
 8002886:	89bb      	ldrh	r3, [r7, #12]
 8002888:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800288c:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	899b      	ldrh	r3, [r3, #12]
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	b29a      	uxth	r2, r3
 8002896:	89bb      	ldrh	r3, [r7, #12]
 8002898:	4313      	orrs	r3, r2
 800289a:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	89db      	ldrh	r3, [r3, #14]
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	89bb      	ldrh	r3, [r7, #12]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	89ba      	ldrh	r2, [r7, #12]
 80028ae:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	897a      	ldrh	r2, [r7, #10]
 80028b4:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	88da      	ldrh	r2, [r3, #6]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	871a      	strh	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	89fa      	ldrh	r2, [r7, #14]
 80028c2:	841a      	strh	r2, [r3, #32]
}
 80028c4:	3714      	adds	r7, #20
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop

080028d0 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80028da:	2300      	movs	r3, #0
 80028dc:	817b      	strh	r3, [r7, #10]
 80028de:	2300      	movs	r3, #0
 80028e0:	81fb      	strh	r3, [r7, #14]
 80028e2:	2300      	movs	r3, #0
 80028e4:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	8c1b      	ldrh	r3, [r3, #32]
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	8c1b      	ldrh	r3, [r3, #32]
 80028fa:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	889b      	ldrh	r3, [r3, #4]
 8002900:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	8b9b      	ldrh	r3, [r3, #28]
 8002906:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
 8002908:	897b      	ldrh	r3, [r7, #10]
 800290a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800290e:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
 8002910:	897b      	ldrh	r3, [r7, #10]
 8002912:	f023 0303 	bic.w	r3, r3, #3
 8002916:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	881a      	ldrh	r2, [r3, #0]
 800291c:	897b      	ldrh	r3, [r7, #10]
 800291e:	4313      	orrs	r3, r2
 8002920:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 8002922:	89fb      	ldrh	r3, [r7, #14]
 8002924:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002928:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	891b      	ldrh	r3, [r3, #8]
 800292e:	021b      	lsls	r3, r3, #8
 8002930:	b29a      	uxth	r2, r3
 8002932:	89fb      	ldrh	r3, [r7, #14]
 8002934:	4313      	orrs	r3, r2
 8002936:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	885b      	ldrh	r3, [r3, #2]
 800293c:	021b      	lsls	r3, r3, #8
 800293e:	b29a      	uxth	r2, r3
 8002940:	89fb      	ldrh	r3, [r7, #14]
 8002942:	4313      	orrs	r3, r2
 8002944:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800294c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002950:	429a      	cmp	r2, r3
 8002952:	d006      	beq.n	8002962 <TIM_OC3Init+0x92>
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 800295a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800295e:	429a      	cmp	r2, r3
 8002960:	d12b      	bne.n	80029ba <TIM_OC3Init+0xea>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
 8002962:	89fb      	ldrh	r3, [r7, #14]
 8002964:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002968:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	895b      	ldrh	r3, [r3, #10]
 800296e:	021b      	lsls	r3, r3, #8
 8002970:	b29a      	uxth	r2, r3
 8002972:	89fb      	ldrh	r3, [r7, #14]
 8002974:	4313      	orrs	r3, r2
 8002976:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
 8002978:	89fb      	ldrh	r3, [r7, #14]
 800297a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800297e:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	889b      	ldrh	r3, [r3, #4]
 8002984:	021b      	lsls	r3, r3, #8
 8002986:	b29a      	uxth	r2, r3
 8002988:	89fb      	ldrh	r3, [r7, #14]
 800298a:	4313      	orrs	r3, r2
 800298c:	81fb      	strh	r3, [r7, #14]
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
 800298e:	89bb      	ldrh	r3, [r7, #12]
 8002990:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002994:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
 8002996:	89bb      	ldrh	r3, [r7, #12]
 8002998:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800299c:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	899b      	ldrh	r3, [r3, #12]
 80029a2:	011b      	lsls	r3, r3, #4
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	89bb      	ldrh	r3, [r7, #12]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	89db      	ldrh	r3, [r3, #14]
 80029b0:	011b      	lsls	r3, r3, #4
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	89bb      	ldrh	r3, [r7, #12]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	89ba      	ldrh	r2, [r7, #12]
 80029be:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	897a      	ldrh	r2, [r7, #10]
 80029c4:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	88da      	ldrh	r2, [r3, #6]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	89fa      	ldrh	r2, [r7, #14]
 80029d2:	841a      	strh	r2, [r3, #32]
}
 80029d4:	3714      	adds	r7, #20
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop

080029e0 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80029ea:	2300      	movs	r3, #0
 80029ec:	81bb      	strh	r3, [r7, #12]
 80029ee:	2300      	movs	r3, #0
 80029f0:	817b      	strh	r3, [r7, #10]
 80029f2:	2300      	movs	r3, #0
 80029f4:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	8c1b      	ldrh	r3, [r3, #32]
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	8c1b      	ldrh	r3, [r3, #32]
 8002a0a:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	889b      	ldrh	r3, [r3, #4]
 8002a10:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	8b9b      	ldrh	r3, [r3, #28]
 8002a16:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
 8002a18:	89bb      	ldrh	r3, [r7, #12]
 8002a1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a1e:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
 8002a20:	89bb      	ldrh	r3, [r7, #12]
 8002a22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a26:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	881b      	ldrh	r3, [r3, #0]
 8002a2c:	021b      	lsls	r3, r3, #8
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	89bb      	ldrh	r3, [r7, #12]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 8002a36:	897b      	ldrh	r3, [r7, #10]
 8002a38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a3c:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	891b      	ldrh	r3, [r3, #8]
 8002a42:	031b      	lsls	r3, r3, #12
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	897b      	ldrh	r3, [r7, #10]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	885b      	ldrh	r3, [r3, #2]
 8002a50:	031b      	lsls	r3, r3, #12
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	897b      	ldrh	r3, [r7, #10]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	817b      	strh	r3, [r7, #10]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002a60:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d006      	beq.n	8002a76 <TIM_OC4Init+0x96>
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8002a6e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d10a      	bne.n	8002a8c <TIM_OC4Init+0xac>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Ouput Compare IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
 8002a76:	89fb      	ldrh	r3, [r7, #14]
 8002a78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a7c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	899b      	ldrh	r3, [r3, #12]
 8002a82:	019b      	lsls	r3, r3, #6
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	89fb      	ldrh	r3, [r7, #14]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	89fa      	ldrh	r2, [r7, #14]
 8002a90:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	89ba      	ldrh	r2, [r7, #12]
 8002a96:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	88da      	ldrh	r2, [r3, #6]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	897a      	ldrh	r2, [r7, #10]
 8002aa6:	841a      	strh	r2, [r3, #32]
}
 8002aa8:	3714      	adds	r7, #20
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop

08002ab4 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	881b      	ldrh	r3, [r3, #0]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10f      	bne.n	8002ae6 <TIM_ICInit+0x32>
  {
    assert_param(IS_TIM_LIST8_PERIPH(TIMx));
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	8859      	ldrh	r1, [r3, #2]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	889a      	ldrh	r2, [r3, #4]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	891b      	ldrh	r3, [r3, #8]
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f001 f966 	bl	8003da4 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	88db      	ldrh	r3, [r3, #6]
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	4619      	mov	r1, r3
 8002ae0:	f001 f816 	bl	8003b10 <TIM_SetIC1Prescaler>
 8002ae4:	e036      	b.n	8002b54 <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	881b      	ldrh	r3, [r3, #0]
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	d10f      	bne.n	8002b0e <TIM_ICInit+0x5a>
  {
    assert_param(IS_TIM_LIST6_PERIPH(TIMx));
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	8859      	ldrh	r1, [r3, #2]
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	889a      	ldrh	r2, [r3, #4]
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	891b      	ldrh	r3, [r3, #8]
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f001 f98e 	bl	8003e1c <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	88db      	ldrh	r3, [r3, #6]
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	4619      	mov	r1, r3
 8002b08:	f001 f81e 	bl	8003b48 <TIM_SetIC2Prescaler>
 8002b0c:	e022      	b.n	8002b54 <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	881b      	ldrh	r3, [r3, #0]
 8002b12:	2b08      	cmp	r3, #8
 8002b14:	d10f      	bne.n	8002b36 <TIM_ICInit+0x82>
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	8859      	ldrh	r1, [r3, #2]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	889a      	ldrh	r2, [r3, #4]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	891b      	ldrh	r3, [r3, #8]
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f001 f9c0 	bl	8003ea8 <TI3_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	88db      	ldrh	r3, [r3, #6]
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	4619      	mov	r1, r3
 8002b30:	f001 f828 	bl	8003b84 <TIM_SetIC3Prescaler>
 8002b34:	e00e      	b.n	8002b54 <TIM_ICInit+0xa0>
  }
  else
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	8859      	ldrh	r1, [r3, #2]
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	889a      	ldrh	r2, [r3, #4]
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	891b      	ldrh	r3, [r3, #8]
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f001 f9f2 	bl	8003f2c <TI4_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	88db      	ldrh	r3, [r3, #6]
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	4619      	mov	r1, r3
 8002b50:	f001 f834 	bl	8003bbc <TIM_SetIC4Prescaler>
  }
}
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop

08002b5c <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
 8002b66:	2300      	movs	r3, #0
 8002b68:	81fb      	strh	r3, [r7, #14]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	81bb      	strh	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	885b      	ldrh	r3, [r3, #2]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d102      	bne.n	8002b7c <TIM_PWMIConfig+0x20>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 8002b76:	2302      	movs	r3, #2
 8002b78:	81fb      	strh	r3, [r7, #14]
 8002b7a:	e001      	b.n	8002b80 <TIM_PWMIConfig+0x24>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	81fb      	strh	r3, [r7, #14]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	889b      	ldrh	r3, [r3, #4]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d102      	bne.n	8002b8e <TIM_PWMIConfig+0x32>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 8002b88:	2302      	movs	r3, #2
 8002b8a:	81bb      	strh	r3, [r7, #12]
 8002b8c:	e001      	b.n	8002b92 <TIM_PWMIConfig+0x36>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	81bb      	strh	r3, [r7, #12]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	881b      	ldrh	r3, [r3, #0]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d11c      	bne.n	8002bd4 <TIM_PWMIConfig+0x78>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	8859      	ldrh	r1, [r3, #2]
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	889a      	ldrh	r2, [r3, #4]
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	891b      	ldrh	r3, [r3, #8]
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f001 f8fc 	bl	8003da4 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	88db      	ldrh	r3, [r3, #6]
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	f000 ffac 	bl	8003b10 <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	891b      	ldrh	r3, [r3, #8]
 8002bbc:	89f9      	ldrh	r1, [r7, #14]
 8002bbe:	89ba      	ldrh	r2, [r7, #12]
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f001 f92b 	bl	8003e1c <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	88db      	ldrh	r3, [r3, #6]
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	4619      	mov	r1, r3
 8002bce:	f000 ffbb 	bl	8003b48 <TIM_SetIC2Prescaler>
 8002bd2:	e01b      	b.n	8002c0c <TIM_PWMIConfig+0xb0>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	8859      	ldrh	r1, [r3, #2]
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	889a      	ldrh	r2, [r3, #4]
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	891b      	ldrh	r3, [r3, #8]
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f001 f91b 	bl	8003e1c <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	88db      	ldrh	r3, [r3, #6]
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	4619      	mov	r1, r3
 8002bee:	f000 ffab 	bl	8003b48 <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	891b      	ldrh	r3, [r3, #8]
 8002bf6:	89f9      	ldrh	r1, [r7, #14]
 8002bf8:	89ba      	ldrh	r2, [r7, #12]
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f001 f8d2 	bl	8003da4 <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	88db      	ldrh	r3, [r3, #6]
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	4619      	mov	r1, r3
 8002c08:	f000 ff82 	bl	8003b10 <TIM_SetIC1Prescaler>
  }
}
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop

08002c14 <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *   contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	881a      	ldrh	r2, [r3, #0]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	885b      	ldrh	r3, [r3, #2]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	889b      	ldrh	r3, [r3, #4]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	88db      	ldrh	r3, [r3, #6]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8002c36:	4313      	orrs	r3, r2
 8002c38:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	891b      	ldrh	r3, [r3, #8]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	895b      	ldrh	r3, [r3, #10]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8002c46:	4313      	orrs	r3, r2
 8002c48:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	899b      	ldrh	r3, [r3, #12]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	b29a      	uxth	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop

08002c64 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *   structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c72:	809a      	strh	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	80da      	strh	r2, [r3, #6]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	721a      	strb	r2, [r3, #8]
}
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop

08002c98 <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct : pointer to a TIM_OCInitTypeDef structure which will
  *   be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	801a      	strh	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	805a      	strh	r2, [r3, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x0000;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	80da      	strh	r2, [r3, #6]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	811a      	strh	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	815a      	strh	r2, [r3, #10]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	81da      	strh	r2, [r3, #14]
}
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop

08002cdc <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct : pointer to a TIM_ICInitTypeDef structure which will
  *   be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	811a      	strh	r2, [r3, #8]
}
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <TIM_BDTRStructInit>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *   will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	801a      	strh	r2, [r3, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	805a      	strh	r2, [r3, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	809a      	strh	r2, [r3, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	80da      	strh	r2, [r3, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	811a      	strh	r2, [r3, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	815a      	strh	r2, [r3, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	819a      	strh	r2, [r3, #12]
}
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	460b      	mov	r3, r1
 8002d52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002d54:	78fb      	ldrb	r3, [r7, #3]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d008      	beq.n	8002d6c <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	881b      	ldrh	r3, [r3, #0]
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	f043 0301 	orr.w	r3, r3, #1
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	801a      	strh	r2, [r3, #0]
 8002d6a:	e007      	b.n	8002d7c <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	881b      	ldrh	r3, [r3, #0]
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	f023 0301 	bic.w	r3, r3, #1
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	801a      	strh	r2, [r3, #0]
  }
}
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop

08002d88 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	460b      	mov	r3, r1
 8002d92:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002d94:	78fb      	ldrb	r3, [r7, #3]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00c      	beq.n	8002db4 <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002da6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8002db2:	e009      	b.n	8002dc8 <TIM_CtrlPWMOutputs+0x40>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }  
}
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop

08002dd4 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	460a      	mov	r2, r1
 8002de0:	807a      	strh	r2, [r7, #2]
 8002de2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002de4:	787b      	ldrb	r3, [r7, #1]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d008      	beq.n	8002dfc <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	899b      	ldrh	r3, [r3, #12]
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	887b      	ldrh	r3, [r7, #2]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	819a      	strh	r2, [r3, #12]
 8002dfa:	e009      	b.n	8002e10 <TIM_ITConfig+0x3c>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	899b      	ldrh	r3, [r3, #12]
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	887b      	ldrh	r3, [r7, #2]
 8002e04:	43db      	mvns	r3, r3
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	4013      	ands	r3, r2
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	819a      	strh	r2, [r3, #12]
  }
}
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop

08002e1c <TIM_GenerateEvent>:
  *   - TIM6 and TIM7 can only generate an update event. 
  *   - TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.      
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	460b      	mov	r3, r1
 8002e26:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
  
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	887a      	ldrh	r2, [r7, #2]
 8002e2c:	829a      	strh	r2, [r3, #20]
}
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <TIM_DMAConfig>:
  *   This parameter can be one value between:
  *   TIM_DMABurstLength_1Byte and TIM_DMABurstLength_18Bytes.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	4613      	mov	r3, r2
 8002e42:	460a      	mov	r2, r1
 8002e44:	807a      	strh	r2, [r7, #2]
 8002e46:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase));
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));
  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 8002e48:	887a      	ldrh	r2, [r7, #2]
 8002e4a:	883b      	ldrh	r3, [r7, #0]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	460a      	mov	r2, r1
 8002e6c:	807a      	strh	r2, [r7, #2]
 8002e6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST9_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002e70:	787b      	ldrb	r3, [r7, #1]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d008      	beq.n	8002e88 <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	899b      	ldrh	r3, [r3, #12]
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	887b      	ldrh	r3, [r7, #2]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	819a      	strh	r2, [r3, #12]
 8002e86:	e009      	b.n	8002e9c <TIM_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	899b      	ldrh	r3, [r3, #12]
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	887b      	ldrh	r3, [r7, #2]
 8002e90:	43db      	mvns	r3, r3
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	4013      	ands	r3, r2
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	819a      	strh	r2, [r3, #12]
  }
}
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop

08002ea8 <TIM_InternalClockConfig>:
  * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 9, 12 or 15
  *   to select the TIM peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	891b      	ldrh	r3, [r3, #8]
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	f023 0307 	bic.w	r3, r3, #7
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	811a      	strh	r2, [r3, #8]
}
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop

08002ecc <TIM_ITRxExternalClockConfig>:
  * @param  TIM_TS_ITR2: Internal Trigger 2
  * @param  TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
 8002ed8:	887b      	ldrh	r3, [r7, #2]
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	4619      	mov	r1, r3
 8002ede:	f000 f8c9 	bl	8003074 <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	891b      	ldrh	r3, [r3, #8]
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	f043 0307 	orr.w	r3, r3, #7
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	811a      	strh	r2, [r3, #8]
}
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <TIM_TIxExternalClockConfig>:
  *   This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	8179      	strh	r1, [r7, #10]
 8002f02:	813a      	strh	r2, [r7, #8]
 8002f04:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));
  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 8002f06:	897b      	ldrh	r3, [r7, #10]
 8002f08:	2b60      	cmp	r3, #96	; 0x60
 8002f0a:	d107      	bne.n	8002f1c <TIM_TIxExternalClockConfig+0x24>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8002f0c:	893a      	ldrh	r2, [r7, #8]
 8002f0e:	88fb      	ldrh	r3, [r7, #6]
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	4611      	mov	r1, r2
 8002f14:	2201      	movs	r2, #1
 8002f16:	f000 ff81 	bl	8003e1c <TI2_Config>
 8002f1a:	e006      	b.n	8002f2a <TIM_TIxExternalClockConfig+0x32>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8002f1c:	893a      	ldrh	r2, [r7, #8]
 8002f1e:	88fb      	ldrh	r3, [r7, #6]
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	4611      	mov	r1, r2
 8002f24:	2201      	movs	r2, #1
 8002f26:	f000 ff3d 	bl	8003da4 <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
 8002f2a:	897b      	ldrh	r3, [r7, #10]
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	4619      	mov	r1, r3
 8002f30:	f000 f8a0 	bl	8003074 <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	891b      	ldrh	r3, [r3, #8]
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	f043 0307 	orr.w	r3, r3, #7
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	811a      	strh	r2, [r3, #8]
}
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop

08002f4c <TIM_ETRClockMode1Config>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                             uint16_t ExtTRGFilter)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	8179      	strh	r1, [r7, #10]
 8002f56:	813a      	strh	r2, [r7, #8]
 8002f58:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8002f5e:	8979      	ldrh	r1, [r7, #10]
 8002f60:	893a      	ldrh	r2, [r7, #8]
 8002f62:	88fb      	ldrh	r3, [r7, #6]
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f000 f831 	bl	8002fcc <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	891b      	ldrh	r3, [r3, #8]
 8002f6e:	82fb      	strh	r3, [r7, #22]
  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 8002f70:	8afb      	ldrh	r3, [r7, #22]
 8002f72:	f023 0307 	bic.w	r3, r3, #7
 8002f76:	82fb      	strh	r3, [r7, #22]
  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 8002f78:	8afb      	ldrh	r3, [r7, #22]
 8002f7a:	f043 0307 	orr.w	r3, r3, #7
 8002f7e:	82fb      	strh	r3, [r7, #22]
  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 8002f80:	8afb      	ldrh	r3, [r7, #22]
 8002f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f86:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_TS_ETRF;
 8002f88:	8afb      	ldrh	r3, [r7, #22]
 8002f8a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002f8e:	82fb      	strh	r3, [r7, #22]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	8afa      	ldrh	r2, [r7, #22]
 8002f94:	811a      	strh	r2, [r3, #8]
}
 8002f96:	3718      	adds	r7, #24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <TIM_ETRClockMode2Config>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	8179      	strh	r1, [r7, #10]
 8002fa6:	813a      	strh	r2, [r7, #8]
 8002fa8:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8002faa:	8979      	ldrh	r1, [r7, #10]
 8002fac:	893a      	ldrh	r2, [r7, #8]
 8002fae:	88fb      	ldrh	r3, [r7, #6]
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f000 f80b 	bl	8002fcc <TIM_ETRConfig>
  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	891b      	ldrh	r3, [r3, #8]
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	811a      	strh	r2, [r3, #8]
}
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <TIM_ETRConfig>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                   uint16_t ExtTRGFilter)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b087      	sub	sp, #28
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	8179      	strh	r1, [r7, #10]
 8002fd6:	813a      	strh	r2, [r7, #8]
 8002fd8:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	82fb      	strh	r3, [r7, #22]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  tmpsmcr = TIMx->SMCR;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	891b      	ldrh	r3, [r3, #8]
 8002fe2:	82fb      	strh	r3, [r7, #22]
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_Mask;
 8002fe4:	8afb      	ldrh	r3, [r7, #22]
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	82fb      	strh	r3, [r7, #22]
  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8002fea:	88fb      	ldrh	r3, [r7, #6]
 8002fec:	021b      	lsls	r3, r3, #8
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	893b      	ldrh	r3, [r7, #8]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	897b      	ldrh	r3, [r7, #10]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	8afb      	ldrh	r3, [r7, #22]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	82fb      	strh	r3, [r7, #22]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	8afa      	ldrh	r2, [r7, #22]
 8003006:	811a      	strh	r2, [r3, #8]
}
 8003008:	371c      	adds	r7, #28
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop

08003014 <TIM_PrescalerConfig>:
  *     @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *     @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediately.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	4613      	mov	r3, r2
 800301e:	460a      	mov	r2, r1
 8003020:	807a      	strh	r2, [r7, #2]
 8003022:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	887a      	ldrh	r2, [r7, #2]
 8003028:	851a      	strh	r2, [r3, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	883a      	ldrh	r2, [r7, #0]
 800302e:	829a      	strh	r2, [r3, #20]
}
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop

0800303c <TIM_CounterModeConfig>:
  *     @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *     @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	460b      	mov	r3, r1
 8003046:	807b      	strh	r3, [r7, #2]
  uint16_t tmpcr1 = 0;
 8003048:	2300      	movs	r3, #0
 800304a:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));
  tmpcr1 = TIMx->CR1;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	881b      	ldrh	r3, [r3, #0]
 8003050:	81fb      	strh	r3, [r7, #14]
  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8003052:	89fb      	ldrh	r3, [r7, #14]
 8003054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003058:	81fb      	strh	r3, [r7, #14]
  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 800305a:	89fa      	ldrh	r2, [r7, #14]
 800305c:	887b      	ldrh	r3, [r7, #2]
 800305e:	4313      	orrs	r3, r2
 8003060:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	89fa      	ldrh	r2, [r7, #14]
 8003066:	801a      	strh	r2, [r3, #0]
}
 8003068:	3714      	adds	r7, #20
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop

08003074 <TIM_SelectInputTrigger>:
  *     @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *     @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	460b      	mov	r3, r1
 800307e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpsmcr = 0;
 8003080:	2300      	movs	r3, #0
 8003082:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	891b      	ldrh	r3, [r3, #8]
 8003088:	81fb      	strh	r3, [r7, #14]
  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 800308a:	89fb      	ldrh	r3, [r7, #14]
 800308c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003090:	81fb      	strh	r3, [r7, #14]
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8003092:	89fa      	ldrh	r2, [r7, #14]
 8003094:	887b      	ldrh	r3, [r7, #2]
 8003096:	4313      	orrs	r3, r2
 8003098:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	89fa      	ldrh	r2, [r7, #14]
 800309e:	811a      	strh	r2, [r3, #8]
}
 80030a0:	3714      	adds	r7, #20
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop

080030ac <TIM_EncoderInterfaceConfig>:
  *     @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b087      	sub	sp, #28
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	8179      	strh	r1, [r7, #10]
 80030b6:	813a      	strh	r2, [r7, #8]
 80030b8:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 80030ba:	2300      	movs	r3, #0
 80030bc:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
 80030be:	2300      	movs	r3, #0
 80030c0:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
 80030c2:	2300      	movs	r3, #0
 80030c4:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	891b      	ldrh	r3, [r3, #8]
 80030ca:	82fb      	strh	r3, [r7, #22]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8b1b      	ldrh	r3, [r3, #24]
 80030d0:	82bb      	strh	r3, [r7, #20]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	8c1b      	ldrh	r3, [r3, #32]
 80030d6:	827b      	strh	r3, [r7, #18]
  
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 80030d8:	8afb      	ldrh	r3, [r7, #22]
 80030da:	f023 0307 	bic.w	r3, r3, #7
 80030de:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
 80030e0:	8afa      	ldrh	r2, [r7, #22]
 80030e2:	897b      	ldrh	r3, [r7, #10]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	82fb      	strh	r3, [r7, #22]
  
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
 80030e8:	8abb      	ldrh	r3, [r7, #20]
 80030ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030ee:	f023 0303 	bic.w	r3, r3, #3
 80030f2:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 80030f4:	8abb      	ldrh	r3, [r7, #20]
 80030f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030fa:	f043 0301 	orr.w	r3, r3, #1
 80030fe:	82bb      	strh	r3, [r7, #20]
  
  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCER_CC1P)) & ((uint16_t)~((uint16_t)TIM_CCER_CC2P)));
 8003100:	8a7b      	ldrh	r3, [r7, #18]
 8003102:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003106:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8003108:	88fb      	ldrh	r3, [r7, #6]
 800310a:	011b      	lsls	r3, r3, #4
 800310c:	b29a      	uxth	r2, r3
 800310e:	893b      	ldrh	r3, [r7, #8]
 8003110:	4313      	orrs	r3, r2
 8003112:	b29a      	uxth	r2, r3
 8003114:	8a7b      	ldrh	r3, [r7, #18]
 8003116:	4313      	orrs	r3, r2
 8003118:	827b      	strh	r3, [r7, #18]
  
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	8afa      	ldrh	r2, [r7, #22]
 800311e:	811a      	strh	r2, [r3, #8]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	8aba      	ldrh	r2, [r7, #20]
 8003124:	831a      	strh	r2, [r3, #24]
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	8a7a      	ldrh	r2, [r7, #18]
 800312a:	841a      	strh	r2, [r3, #32]
}
 800312c:	371c      	adds	r7, #28
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop

08003138 <TIM_ForcedOC1Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	460b      	mov	r3, r1
 8003142:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8003144:	2300      	movs	r3, #0
 8003146:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	8b1b      	ldrh	r3, [r3, #24]
 800314c:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1M);
 800314e:	89fb      	ldrh	r3, [r7, #14]
 8003150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003154:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 8003156:	89fa      	ldrh	r2, [r7, #14]
 8003158:	887b      	ldrh	r3, [r7, #2]
 800315a:	4313      	orrs	r3, r2
 800315c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	89fa      	ldrh	r2, [r7, #14]
 8003162:	831a      	strh	r2, [r3, #24]
}
 8003164:	3714      	adds	r7, #20
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop

08003170 <TIM_ForcedOC2Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	460b      	mov	r3, r1
 800317a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800317c:	2300      	movs	r3, #0
 800317e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	8b1b      	ldrh	r3, [r3, #24]
 8003184:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2M);
 8003186:	89fb      	ldrh	r3, [r7, #14]
 8003188:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800318c:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 800318e:	887b      	ldrh	r3, [r7, #2]
 8003190:	021b      	lsls	r3, r3, #8
 8003192:	b29a      	uxth	r2, r3
 8003194:	89fb      	ldrh	r3, [r7, #14]
 8003196:	4313      	orrs	r3, r2
 8003198:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	89fa      	ldrh	r2, [r7, #14]
 800319e:	831a      	strh	r2, [r3, #24]
}
 80031a0:	3714      	adds	r7, #20
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop

080031ac <TIM_ForcedOC3Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	460b      	mov	r3, r1
 80031b6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80031b8:	2300      	movs	r3, #0
 80031ba:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	8b9b      	ldrh	r3, [r3, #28]
 80031c0:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3M);
 80031c2:	89fb      	ldrh	r3, [r7, #14]
 80031c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031c8:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 80031ca:	89fa      	ldrh	r2, [r7, #14]
 80031cc:	887b      	ldrh	r3, [r7, #2]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	89fa      	ldrh	r2, [r7, #14]
 80031d6:	839a      	strh	r2, [r3, #28]
}
 80031d8:	3714      	adds	r7, #20
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop

080031e4 <TIM_ForcedOC4Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	460b      	mov	r3, r1
 80031ee:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80031f0:	2300      	movs	r3, #0
 80031f2:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	8b9b      	ldrh	r3, [r3, #28]
 80031f8:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4M);
 80031fa:	89fb      	ldrh	r3, [r7, #14]
 80031fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003200:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 8003202:	887b      	ldrh	r3, [r7, #2]
 8003204:	021b      	lsls	r3, r3, #8
 8003206:	b29a      	uxth	r2, r3
 8003208:	89fb      	ldrh	r3, [r7, #14]
 800320a:	4313      	orrs	r3, r2
 800320c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	89fa      	ldrh	r2, [r7, #14]
 8003212:	839a      	strh	r2, [r3, #28]
}
 8003214:	3714      	adds	r7, #20
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop

08003220 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	460b      	mov	r3, r1
 800322a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800322c:	78fb      	ldrb	r3, [r7, #3]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d008      	beq.n	8003244 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	881b      	ldrh	r3, [r3, #0]
 8003236:	b29b      	uxth	r3, r3
 8003238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800323c:	b29a      	uxth	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	801a      	strh	r2, [r3, #0]
 8003242:	e007      	b.n	8003254 <TIM_ARRPreloadConfig+0x34>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	881b      	ldrh	r3, [r3, #0]
 8003248:	b29b      	uxth	r3, r3
 800324a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800324e:	b29a      	uxth	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	801a      	strh	r2, [r3, #0]
  }
}
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop

08003260 <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	460b      	mov	r3, r1
 800326a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800326c:	78fb      	ldrb	r3, [r7, #3]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d008      	beq.n	8003284 <TIM_SelectCOM+0x24>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	889b      	ldrh	r3, [r3, #4]
 8003276:	b29b      	uxth	r3, r3
 8003278:	f043 0304 	orr.w	r3, r3, #4
 800327c:	b29a      	uxth	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	809a      	strh	r2, [r3, #4]
 8003282:	e007      	b.n	8003294 <TIM_SelectCOM+0x34>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCUS);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	889b      	ldrh	r3, [r3, #4]
 8003288:	b29b      	uxth	r3, r3
 800328a:	f023 0304 	bic.w	r3, r3, #4
 800328e:	b29a      	uxth	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	809a      	strh	r2, [r3, #4]
  }
}
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop

080032a0 <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	460b      	mov	r3, r1
 80032aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80032ac:	78fb      	ldrb	r3, [r7, #3]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d008      	beq.n	80032c4 <TIM_SelectCCDMA+0x24>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	889b      	ldrh	r3, [r3, #4]
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	f043 0308 	orr.w	r3, r3, #8
 80032bc:	b29a      	uxth	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	809a      	strh	r2, [r3, #4]
 80032c2:	e007      	b.n	80032d4 <TIM_SelectCCDMA+0x34>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCDS);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	889b      	ldrh	r3, [r3, #4]
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	f023 0308 	bic.w	r3, r3, #8
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	809a      	strh	r2, [r3, #4]
  }
}
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop

080032e0 <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	460b      	mov	r3, r1
 80032ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80032ec:	78fb      	ldrb	r3, [r7, #3]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d008      	beq.n	8003304 <TIM_CCPreloadControl+0x24>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	889b      	ldrh	r3, [r3, #4]
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	f043 0301 	orr.w	r3, r3, #1
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	809a      	strh	r2, [r3, #4]
 8003302:	e007      	b.n	8003314 <TIM_CCPreloadControl+0x34>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCPC);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	889b      	ldrh	r3, [r3, #4]
 8003308:	b29b      	uxth	r3, r3
 800330a:	f023 0301 	bic.w	r3, r3, #1
 800330e:	b29a      	uxth	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	809a      	strh	r2, [r3, #4]
  }
}
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop

08003320 <TIM_OC1PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	460b      	mov	r3, r1
 800332a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800332c:	2300      	movs	r3, #0
 800332e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	8b1b      	ldrh	r3, [r3, #24]
 8003334:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 8003336:	89fb      	ldrh	r3, [r7, #14]
 8003338:	f023 0308 	bic.w	r3, r3, #8
 800333c:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 800333e:	89fa      	ldrh	r2, [r7, #14]
 8003340:	887b      	ldrh	r3, [r7, #2]
 8003342:	4313      	orrs	r3, r2
 8003344:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	89fa      	ldrh	r2, [r7, #14]
 800334a:	831a      	strh	r2, [r3, #24]
}
 800334c:	3714      	adds	r7, #20
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop

08003358 <TIM_OC2PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	460b      	mov	r3, r1
 8003362:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8003364:	2300      	movs	r3, #0
 8003366:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	8b1b      	ldrh	r3, [r3, #24]
 800336c:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
 800336e:	89fb      	ldrh	r3, [r7, #14]
 8003370:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003374:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8003376:	887b      	ldrh	r3, [r7, #2]
 8003378:	021b      	lsls	r3, r3, #8
 800337a:	b29a      	uxth	r2, r3
 800337c:	89fb      	ldrh	r3, [r7, #14]
 800337e:	4313      	orrs	r3, r2
 8003380:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	89fa      	ldrh	r2, [r7, #14]
 8003386:	831a      	strh	r2, [r3, #24]
}
 8003388:	3714      	adds	r7, #20
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop

08003394 <TIM_OC3PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	460b      	mov	r3, r1
 800339e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80033a0:	2300      	movs	r3, #0
 80033a2:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	8b9b      	ldrh	r3, [r3, #28]
 80033a8:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
 80033aa:	89fb      	ldrh	r3, [r7, #14]
 80033ac:	f023 0308 	bic.w	r3, r3, #8
 80033b0:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 80033b2:	89fa      	ldrh	r2, [r7, #14]
 80033b4:	887b      	ldrh	r3, [r7, #2]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	89fa      	ldrh	r2, [r7, #14]
 80033be:	839a      	strh	r2, [r3, #28]
}
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop

080033cc <TIM_OC4PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	460b      	mov	r3, r1
 80033d6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80033d8:	2300      	movs	r3, #0
 80033da:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	8b9b      	ldrh	r3, [r3, #28]
 80033e0:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
 80033e2:	89fb      	ldrh	r3, [r7, #14]
 80033e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033e8:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 80033ea:	887b      	ldrh	r3, [r7, #2]
 80033ec:	021b      	lsls	r3, r3, #8
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	89fb      	ldrh	r3, [r7, #14]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	89fa      	ldrh	r2, [r7, #14]
 80033fa:	839a      	strh	r2, [r3, #28]
}
 80033fc:	3714      	adds	r7, #20
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop

08003408 <TIM_OC1FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	460b      	mov	r3, r1
 8003412:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8003414:	2300      	movs	r3, #0
 8003416:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	8b1b      	ldrh	r3, [r3, #24]
 800341c:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1FE);
 800341e:	89fb      	ldrh	r3, [r7, #14]
 8003420:	f023 0304 	bic.w	r3, r3, #4
 8003424:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 8003426:	89fa      	ldrh	r2, [r7, #14]
 8003428:	887b      	ldrh	r3, [r7, #2]
 800342a:	4313      	orrs	r3, r2
 800342c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	89fa      	ldrh	r2, [r7, #14]
 8003432:	831a      	strh	r2, [r3, #24]
}
 8003434:	3714      	adds	r7, #20
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop

08003440 <TIM_OC2FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	460b      	mov	r3, r1
 800344a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800344c:	2300      	movs	r3, #0
 800344e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	8b1b      	ldrh	r3, [r3, #24]
 8003454:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2FE);
 8003456:	89fb      	ldrh	r3, [r7, #14]
 8003458:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800345c:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 800345e:	887b      	ldrh	r3, [r7, #2]
 8003460:	021b      	lsls	r3, r3, #8
 8003462:	b29a      	uxth	r2, r3
 8003464:	89fb      	ldrh	r3, [r7, #14]
 8003466:	4313      	orrs	r3, r2
 8003468:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	89fa      	ldrh	r2, [r7, #14]
 800346e:	831a      	strh	r2, [r3, #24]
}
 8003470:	3714      	adds	r7, #20
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop

0800347c <TIM_OC3FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	460b      	mov	r3, r1
 8003486:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8003488:	2300      	movs	r3, #0
 800348a:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	8b9b      	ldrh	r3, [r3, #28]
 8003490:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3FE);
 8003492:	89fb      	ldrh	r3, [r7, #14]
 8003494:	f023 0304 	bic.w	r3, r3, #4
 8003498:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 800349a:	89fa      	ldrh	r2, [r7, #14]
 800349c:	887b      	ldrh	r3, [r7, #2]
 800349e:	4313      	orrs	r3, r2
 80034a0:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	89fa      	ldrh	r2, [r7, #14]
 80034a6:	839a      	strh	r2, [r3, #28]
}
 80034a8:	3714      	adds	r7, #20
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop

080034b4 <TIM_OC4FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	460b      	mov	r3, r1
 80034be:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80034c0:	2300      	movs	r3, #0
 80034c2:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	8b9b      	ldrh	r3, [r3, #28]
 80034c8:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4FE);
 80034ca:	89fb      	ldrh	r3, [r7, #14]
 80034cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034d0:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 80034d2:	887b      	ldrh	r3, [r7, #2]
 80034d4:	021b      	lsls	r3, r3, #8
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	89fb      	ldrh	r3, [r7, #14]
 80034da:	4313      	orrs	r3, r2
 80034dc:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	89fa      	ldrh	r2, [r7, #14]
 80034e2:	839a      	strh	r2, [r3, #28]
}
 80034e4:	3714      	adds	r7, #20
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop

080034f0 <TIM_ClearOC1Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	460b      	mov	r3, r1
 80034fa:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80034fc:	2300      	movs	r3, #0
 80034fe:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	8b1b      	ldrh	r3, [r3, #24]
 8003504:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1CE);
 8003506:	89fb      	ldrh	r3, [r7, #14]
 8003508:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800350c:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 800350e:	89fa      	ldrh	r2, [r7, #14]
 8003510:	887b      	ldrh	r3, [r7, #2]
 8003512:	4313      	orrs	r3, r2
 8003514:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	89fa      	ldrh	r2, [r7, #14]
 800351a:	831a      	strh	r2, [r3, #24]
}
 800351c:	3714      	adds	r7, #20
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop

08003528 <TIM_ClearOC2Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	460b      	mov	r3, r1
 8003532:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8003534:	2300      	movs	r3, #0
 8003536:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr1 = TIMx->CCMR1;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	8b1b      	ldrh	r3, [r3, #24]
 800353c:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2CE);
 800353e:	89fb      	ldrh	r3, [r7, #14]
 8003540:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003544:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 8003546:	887b      	ldrh	r3, [r7, #2]
 8003548:	021b      	lsls	r3, r3, #8
 800354a:	b29a      	uxth	r2, r3
 800354c:	89fb      	ldrh	r3, [r7, #14]
 800354e:	4313      	orrs	r3, r2
 8003550:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	89fa      	ldrh	r2, [r7, #14]
 8003556:	831a      	strh	r2, [r3, #24]
}
 8003558:	3714      	adds	r7, #20
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop

08003564 <TIM_ClearOC3Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	460b      	mov	r3, r1
 800356e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8003570:	2300      	movs	r3, #0
 8003572:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr2 = TIMx->CCMR2;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	8b9b      	ldrh	r3, [r3, #28]
 8003578:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3CE);
 800357a:	89fb      	ldrh	r3, [r7, #14]
 800357c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003580:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 8003582:	89fa      	ldrh	r2, [r7, #14]
 8003584:	887b      	ldrh	r3, [r7, #2]
 8003586:	4313      	orrs	r3, r2
 8003588:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	89fa      	ldrh	r2, [r7, #14]
 800358e:	839a      	strh	r2, [r3, #28]
}
 8003590:	3714      	adds	r7, #20
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop

0800359c <TIM_ClearOC4Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	460b      	mov	r3, r1
 80035a6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80035a8:	2300      	movs	r3, #0
 80035aa:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr2 = TIMx->CCMR2;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	8b9b      	ldrh	r3, [r3, #28]
 80035b0:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4CE);
 80035b2:	89fb      	ldrh	r3, [r7, #14]
 80035b4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80035b8:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 80035ba:	887b      	ldrh	r3, [r7, #2]
 80035bc:	021b      	lsls	r3, r3, #8
 80035be:	b29a      	uxth	r2, r3
 80035c0:	89fb      	ldrh	r3, [r7, #14]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	89fa      	ldrh	r2, [r7, #14]
 80035ca:	839a      	strh	r2, [r3, #28]
}
 80035cc:	3714      	adds	r7, #20
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop

080035d8 <TIM_OC1PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	460b      	mov	r3, r1
 80035e2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 80035e4:	2300      	movs	r3, #0
 80035e6:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	8c1b      	ldrh	r3, [r3, #32]
 80035ec:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1P);
 80035ee:	89fb      	ldrh	r3, [r7, #14]
 80035f0:	f023 0302 	bic.w	r3, r3, #2
 80035f4:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCPolarity;
 80035f6:	89fa      	ldrh	r2, [r7, #14]
 80035f8:	887b      	ldrh	r3, [r7, #2]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	89fa      	ldrh	r2, [r7, #14]
 8003602:	841a      	strh	r2, [r3, #32]
}
 8003604:	3714      	adds	r7, #20
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop

08003610 <TIM_OC1NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	460b      	mov	r3, r1
 800361a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800361c:	2300      	movs	r3, #0
 800361e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	8c1b      	ldrh	r3, [r3, #32]
 8003624:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1NP);
 8003626:	89fb      	ldrh	r3, [r7, #14]
 8003628:	f023 0308 	bic.w	r3, r3, #8
 800362c:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCNPolarity;
 800362e:	89fa      	ldrh	r2, [r7, #14]
 8003630:	887b      	ldrh	r3, [r7, #2]
 8003632:	4313      	orrs	r3, r2
 8003634:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	89fa      	ldrh	r2, [r7, #14]
 800363a:	841a      	strh	r2, [r3, #32]
}
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop

08003648 <TIM_OC2PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	460b      	mov	r3, r1
 8003652:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8003654:	2300      	movs	r3, #0
 8003656:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	8c1b      	ldrh	r3, [r3, #32]
 800365c:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2P);
 800365e:	89fb      	ldrh	r3, [r7, #14]
 8003660:	f023 0320 	bic.w	r3, r3, #32
 8003664:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 8003666:	887b      	ldrh	r3, [r7, #2]
 8003668:	011b      	lsls	r3, r3, #4
 800366a:	b29a      	uxth	r2, r3
 800366c:	89fb      	ldrh	r3, [r7, #14]
 800366e:	4313      	orrs	r3, r2
 8003670:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	89fa      	ldrh	r2, [r7, #14]
 8003676:	841a      	strh	r2, [r3, #32]
}
 8003678:	3714      	adds	r7, #20
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop

08003684 <TIM_OC2NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	460b      	mov	r3, r1
 800368e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8003690:	2300      	movs	r3, #0
 8003692:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	8c1b      	ldrh	r3, [r3, #32]
 8003698:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2NP);
 800369a:	89fb      	ldrh	r3, [r7, #14]
 800369c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036a0:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 80036a2:	887b      	ldrh	r3, [r7, #2]
 80036a4:	011b      	lsls	r3, r3, #4
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	89fb      	ldrh	r3, [r7, #14]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	89fa      	ldrh	r2, [r7, #14]
 80036b2:	841a      	strh	r2, [r3, #32]
}
 80036b4:	3714      	adds	r7, #20
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop

080036c0 <TIM_OC3PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	460b      	mov	r3, r1
 80036ca:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 80036cc:	2300      	movs	r3, #0
 80036ce:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	8c1b      	ldrh	r3, [r3, #32]
 80036d4:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3P);
 80036d6:	89fb      	ldrh	r3, [r7, #14]
 80036d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036dc:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 80036de:	887b      	ldrh	r3, [r7, #2]
 80036e0:	021b      	lsls	r3, r3, #8
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	89fb      	ldrh	r3, [r7, #14]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	89fa      	ldrh	r2, [r7, #14]
 80036ee:	841a      	strh	r2, [r3, #32]
}
 80036f0:	3714      	adds	r7, #20
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop

080036fc <TIM_OC3NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	460b      	mov	r3, r1
 8003706:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8003708:	2300      	movs	r3, #0
 800370a:	81fb      	strh	r3, [r7, #14]
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	8c1b      	ldrh	r3, [r3, #32]
 8003710:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3NP);
 8003712:	89fb      	ldrh	r3, [r7, #14]
 8003714:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003718:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 800371a:	887b      	ldrh	r3, [r7, #2]
 800371c:	021b      	lsls	r3, r3, #8
 800371e:	b29a      	uxth	r2, r3
 8003720:	89fb      	ldrh	r3, [r7, #14]
 8003722:	4313      	orrs	r3, r2
 8003724:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	89fa      	ldrh	r2, [r7, #14]
 800372a:	841a      	strh	r2, [r3, #32]
}
 800372c:	3714      	adds	r7, #20
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop

08003738 <TIM_OC4PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	460b      	mov	r3, r1
 8003742:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8003744:	2300      	movs	r3, #0
 8003746:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	8c1b      	ldrh	r3, [r3, #32]
 800374c:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC4P);
 800374e:	89fb      	ldrh	r3, [r7, #14]
 8003750:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003754:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 8003756:	887b      	ldrh	r3, [r7, #2]
 8003758:	031b      	lsls	r3, r3, #12
 800375a:	b29a      	uxth	r2, r3
 800375c:	89fb      	ldrh	r3, [r7, #14]
 800375e:	4313      	orrs	r3, r2
 8003760:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	89fa      	ldrh	r2, [r7, #14]
 8003766:	841a      	strh	r2, [r3, #32]
}
 8003768:	3714      	adds	r7, #20
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop

08003774 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *   This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	4613      	mov	r3, r2
 800377e:	460a      	mov	r2, r1
 8003780:	807a      	strh	r2, [r7, #2]
 8003782:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 8003784:	2300      	movs	r3, #0
 8003786:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_Set << TIM_Channel;
 8003788:	887b      	ldrh	r3, [r7, #2]
 800378a:	2201      	movs	r2, #1
 800378c:	fa02 f303 	lsl.w	r3, r2, r3
 8003790:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	8c1b      	ldrh	r3, [r3, #32]
 8003796:	b29a      	uxth	r2, r3
 8003798:	89fb      	ldrh	r3, [r7, #14]
 800379a:	43db      	mvns	r3, r3
 800379c:	b29b      	uxth	r3, r3
 800379e:	4013      	ands	r3, r2
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	8c1b      	ldrh	r3, [r3, #32]
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	8839      	ldrh	r1, [r7, #0]
 80037ae:	887b      	ldrh	r3, [r7, #2]
 80037b0:	fa01 f303 	lsl.w	r3, r1, r3
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	4313      	orrs	r3, r2
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	841a      	strh	r2, [r3, #32]
}
 80037be:	3714      	adds	r7, #20
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *   This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	4613      	mov	r3, r2
 80037d2:	460a      	mov	r2, r1
 80037d4:	807a      	strh	r2, [r7, #2]
 80037d6:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 80037d8:	2300      	movs	r3, #0
 80037da:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_Set << TIM_Channel;
 80037dc:	887b      	ldrh	r3, [r7, #2]
 80037de:	2204      	movs	r2, #4
 80037e0:	fa02 f303 	lsl.w	r3, r2, r3
 80037e4:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	8c1b      	ldrh	r3, [r3, #32]
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	89fb      	ldrh	r3, [r7, #14]
 80037ee:	43db      	mvns	r3, r3
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	4013      	ands	r3, r2
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	8c1b      	ldrh	r3, [r3, #32]
 80037fe:	b29a      	uxth	r2, r3
 8003800:	8839      	ldrh	r1, [r7, #0]
 8003802:	887b      	ldrh	r3, [r7, #2]
 8003804:	fa01 f303 	lsl.w	r3, r1, r3
 8003808:	b29b      	uxth	r3, r3
 800380a:	4313      	orrs	r3, r2
 800380c:	b29a      	uxth	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	841a      	strh	r2, [r3, #32]
}
 8003812:	3714      	adds	r7, #20
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <TIM_SelectOCxM>:
  *     @arg TIM_ForcedAction_Active
  *     @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	4613      	mov	r3, r2
 8003826:	460a      	mov	r2, r1
 8003828:	807a      	strh	r2, [r7, #2]
 800382a:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
 800382c:	2300      	movs	r3, #0
 800382e:	60fb      	str	r3, [r7, #12]
  uint16_t tmp1 = 0;
 8003830:	2300      	movs	r3, #0
 8003832:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	60fb      	str	r3, [r7, #12]
  tmp += CCMR_Offset;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	3318      	adds	r3, #24
 800383c:	60fb      	str	r3, [r7, #12]

  tmp1 = CCER_CCE_Set << (uint16_t)TIM_Channel;
 800383e:	887b      	ldrh	r3, [r7, #2]
 8003840:	2201      	movs	r2, #1
 8003842:	fa02 f303 	lsl.w	r3, r2, r3
 8003846:	817b      	strh	r3, [r7, #10]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	8c1b      	ldrh	r3, [r3, #32]
 800384c:	b29a      	uxth	r2, r3
 800384e:	897b      	ldrh	r3, [r7, #10]
 8003850:	43db      	mvns	r3, r3
 8003852:	b29b      	uxth	r3, r3
 8003854:	4013      	ands	r3, r2
 8003856:	b29a      	uxth	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	841a      	strh	r2, [r3, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 800385c:	887b      	ldrh	r3, [r7, #2]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d002      	beq.n	8003868 <TIM_SelectOCxM+0x4c>
 8003862:	887b      	ldrh	r3, [r7, #2]
 8003864:	2b08      	cmp	r3, #8
 8003866:	d112      	bne.n	800388e <TIM_SelectOCxM+0x72>
  {
    tmp += (TIM_Channel>>1);
 8003868:	887b      	ldrh	r3, [r7, #2]
 800386a:	085b      	lsrs	r3, r3, #1
 800386c:	b29b      	uxth	r3, r3
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	4413      	add	r3, r2
 8003872:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC1M);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	6812      	ldr	r2, [r2, #0]
 800387a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800387e:	601a      	str	r2, [r3, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	6811      	ldr	r1, [r2, #0]
 8003886:	883a      	ldrh	r2, [r7, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	e015      	b.n	80038ba <TIM_SelectOCxM+0x9e>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 800388e:	887b      	ldrh	r3, [r7, #2]
 8003890:	3b04      	subs	r3, #4
 8003892:	b29b      	uxth	r3, r3
 8003894:	085b      	lsrs	r3, r3, #1
 8003896:	b29b      	uxth	r3, r3
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	4413      	add	r3, r2
 800389c:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	6812      	ldr	r2, [r2, #0]
 80038a4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80038a8:	601a      	str	r2, [r3, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	6811      	ldr	r1, [r2, #0]
 80038b0:	883a      	ldrh	r2, [r7, #0]
 80038b2:	0212      	lsls	r2, r2, #8
 80038b4:	b292      	uxth	r2, r2
 80038b6:	430a      	orrs	r2, r1
 80038b8:	601a      	str	r2, [r3, #0]
  }
}
 80038ba:	3714      	adds	r7, #20
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	460b      	mov	r3, r1
 80038ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80038d0:	78fb      	ldrb	r3, [r7, #3]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d008      	beq.n	80038e8 <TIM_UpdateDisableConfig+0x24>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	881b      	ldrh	r3, [r3, #0]
 80038da:	b29b      	uxth	r3, r3
 80038dc:	f043 0302 	orr.w	r3, r3, #2
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	801a      	strh	r2, [r3, #0]
 80038e6:	e007      	b.n	80038f8 <TIM_UpdateDisableConfig+0x34>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_UDIS);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	881b      	ldrh	r3, [r3, #0]
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	f023 0302 	bic.w	r3, r3, #2
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	801a      	strh	r2, [r3, #0]
  }
}
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop

08003904 <TIM_UpdateRequestConfig>:
                                       through the slave mode controller.
  *     @arg TIM_UpdateSource_Global: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	460b      	mov	r3, r1
 800390e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 8003910:	887b      	ldrh	r3, [r7, #2]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d008      	beq.n	8003928 <TIM_UpdateRequestConfig+0x24>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	881b      	ldrh	r3, [r3, #0]
 800391a:	b29b      	uxth	r3, r3
 800391c:	f043 0304 	orr.w	r3, r3, #4
 8003920:	b29a      	uxth	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	801a      	strh	r2, [r3, #0]
 8003926:	e007      	b.n	8003938 <TIM_UpdateRequestConfig+0x34>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_URS);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	881b      	ldrh	r3, [r3, #0]
 800392c:	b29b      	uxth	r3, r3
 800392e:	f023 0304 	bic.w	r3, r3, #4
 8003932:	b29a      	uxth	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	801a      	strh	r2, [r3, #0]
  }
}
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop

08003944 <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	460b      	mov	r3, r1
 800394e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003950:	78fb      	ldrb	r3, [r7, #3]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d008      	beq.n	8003968 <TIM_SelectHallSensor+0x24>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	889b      	ldrh	r3, [r3, #4]
 800395a:	b29b      	uxth	r3, r3
 800395c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003960:	b29a      	uxth	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	809a      	strh	r2, [r3, #4]
 8003966:	e007      	b.n	8003978 <TIM_SelectHallSensor+0x34>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_TI1S);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	889b      	ldrh	r3, [r3, #4]
 800396c:	b29b      	uxth	r3, r3
 800396e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003972:	b29a      	uxth	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	809a      	strh	r2, [r3, #4]
  }
}
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop

08003984 <TIM_SelectOnePulseMode>:
  *     @arg TIM_OPMode_Single
  *     @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	460b      	mov	r3, r1
 800398e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));
  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_OPM);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	881b      	ldrh	r3, [r3, #0]
 8003994:	b29b      	uxth	r3, r3
 8003996:	f023 0308 	bic.w	r3, r3, #8
 800399a:	b29a      	uxth	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	801a      	strh	r2, [r3, #0]
  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	881b      	ldrh	r3, [r3, #0]
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	887b      	ldrh	r3, [r7, #2]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	801a      	strh	r2, [r3, #0]
}
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop

080039bc <TIM_SelectOutputTrigger>:
  *     @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output (TRGO).
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	460b      	mov	r3, r1
 80039c6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST7_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));
  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_MMS);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	889b      	ldrh	r3, [r3, #4]
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	889b      	ldrh	r3, [r3, #4]
 80039dc:	b29a      	uxth	r2, r3
 80039de:	887b      	ldrh	r3, [r7, #2]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	809a      	strh	r2, [r3, #4]
}
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop

080039f4 <TIM_SelectSlaveMode>:
  *     @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI.
  *     @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter.
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	460b      	mov	r3, r1
 80039fe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));
 /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_SMS);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	891b      	ldrh	r3, [r3, #8]
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	f023 0307 	bic.w	r3, r3, #7
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	811a      	strh	r2, [r3, #8]
  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	891b      	ldrh	r3, [r3, #8]
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	887b      	ldrh	r3, [r7, #2]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	811a      	strh	r2, [r3, #8]
}
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop

08003a2c <TIM_SelectMasterSlaveMode>:
  *                                      and its slaves (through TRGO).
  *     @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	460b      	mov	r3, r1
 8003a36:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));
  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_MSM);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	891b      	ldrh	r3, [r3, #8]
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	811a      	strh	r2, [r3, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	891b      	ldrh	r3, [r3, #8]
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	887b      	ldrh	r3, [r7, #2]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	811a      	strh	r2, [r3, #8]
}
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop

08003a64 <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint16_t Counter)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	887a      	ldrh	r2, [r7, #2]
 8003a74:	849a      	strh	r2, [r3, #36]	; 0x24
}
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint16_t Autoreload)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	460b      	mov	r3, r1
 8003a8a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	887a      	ldrh	r2, [r7, #2]
 8003a90:	859a      	strh	r2, [r3, #44]	; 0x2c
}
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	887a      	ldrh	r2, [r7, #2]
 8003aac:	869a      	strh	r2, [r3, #52]	; 0x34
}
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <TIM_SetCompare2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint16_t Compare2)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	887a      	ldrh	r2, [r7, #2]
 8003ac8:	871a      	strh	r2, [r3, #56]	; 0x38
}
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint16_t Compare3)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	460b      	mov	r3, r1
 8003ade:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	887a      	ldrh	r2, [r7, #2]
 8003ae4:	879a      	strh	r2, [r3, #60]	; 0x3c
}
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint16_t Compare4)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	460b      	mov	r3, r1
 8003afa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	887a      	ldrh	r2, [r7, #2]
 8003b00:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop

08003b10 <TIM_SetIC1Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	460b      	mov	r3, r1
 8003b1a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	8b1b      	ldrh	r3, [r3, #24]
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	f023 030c 	bic.w	r3, r3, #12
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	831a      	strh	r2, [r3, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	8b1b      	ldrh	r3, [r3, #24]
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	887b      	ldrh	r3, [r7, #2]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	831a      	strh	r2, [r3, #24]
}
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop

08003b48 <TIM_SetIC2Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	460b      	mov	r3, r1
 8003b52:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	8b1b      	ldrh	r3, [r3, #24]
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	831a      	strh	r2, [r3, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	8b1b      	ldrh	r3, [r3, #24]
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	887b      	ldrh	r3, [r7, #2]
 8003b6c:	021b      	lsls	r3, r3, #8
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	4313      	orrs	r3, r2
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	831a      	strh	r2, [r3, #24]
}
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop

08003b84 <TIM_SetIC3Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	8b9b      	ldrh	r3, [r3, #28]
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	f023 030c 	bic.w	r3, r3, #12
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	839a      	strh	r2, [r3, #28]
  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	8b9b      	ldrh	r3, [r3, #28]
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	887b      	ldrh	r3, [r7, #2]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	839a      	strh	r2, [r3, #28]
}
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop

08003bbc <TIM_SetIC4Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	8b9b      	ldrh	r3, [r3, #28]
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	839a      	strh	r2, [r3, #28]
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	8b9b      	ldrh	r3, [r3, #28]
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	887b      	ldrh	r3, [r7, #2]
 8003be0:	021b      	lsls	r3, r3, #8
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	4313      	orrs	r3, r2
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	839a      	strh	r2, [r3, #28]
}
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop

08003bf8 <TIM_SetClockDivision>:
  *     @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *     @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	460b      	mov	r3, r1
 8003c02:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));
  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_CKD);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	881b      	ldrh	r3, [r3, #0]
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	801a      	strh	r2, [r3, #0]
  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	881b      	ldrh	r3, [r3, #0]
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	887b      	ldrh	r3, [r7, #2]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	801a      	strh	r2, [r3, #0]
}
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop

08003c30 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint16_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8003c3c:	b29b      	uxth	r3, r3
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	370c      	adds	r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop

08003c4c <TIM_GetCapture2>:
  * @brief  Gets the TIMx Input Capture 2 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint16_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003c58:	b29b      	uxth	r3, r3
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop

08003c68 <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint16_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003c74:	b29b      	uxth	r3, r3
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop

08003c84 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint16_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003c92:	b29b      	uxth	r3, r3
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @retval Counter Register value.
  */
uint16_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Counter Register value */
  return TIMx->CNT;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003cac:	b29b      	uxth	r3, r3
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop

08003cbc <TIM_GetPrescaler>:
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Prescaler Register value */
  return TIMx->PSC;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc8:	b29b      	uxth	r3, r3
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop

08003cd8 <TIM_GetFlagStatus>:
  *   - TIM_FLAG_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_FLAG_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	8a1b      	ldrh	r3, [r3, #16]
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	887b      	ldrh	r3, [r7, #2]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d002      	beq.n	8003cfe <TIM_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	73fb      	strb	r3, [r7, #15]
 8003cfc:	e001      	b.n	8003d02 <TIM_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3714      	adds	r7, #20
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <TIM_ClearFlag>:
  *   - TIM_FLAG_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_FLAG_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.   
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	460b      	mov	r3, r1
 8003d1a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_CLEAR_FLAG(TIM_FLAG));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 8003d1c:	887b      	ldrh	r3, [r7, #2]
 8003d1e:	43db      	mvns	r3, r3
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	821a      	strh	r2, [r3, #16]
}
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	460b      	mov	r3, r1
 8003d3a:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8003d40:	2300      	movs	r3, #0
 8003d42:	81bb      	strh	r3, [r7, #12]
 8003d44:	2300      	movs	r3, #0
 8003d46:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	8a1b      	ldrh	r3, [r3, #16]
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	887b      	ldrh	r3, [r7, #2]
 8003d50:	4013      	ands	r3, r2
 8003d52:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	899b      	ldrh	r3, [r3, #12]
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	887b      	ldrh	r3, [r7, #2]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8003d60:	89bb      	ldrh	r3, [r7, #12]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d005      	beq.n	8003d72 <TIM_GetITStatus+0x42>
 8003d66:	897b      	ldrh	r3, [r7, #10]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d002      	beq.n	8003d72 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	73fb      	strb	r3, [r7, #15]
 8003d70:	e001      	b.n	8003d76 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8003d72:	2300      	movs	r3, #0
 8003d74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3714      	adds	r7, #20
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8003d90:	887b      	ldrh	r3, [r7, #2]
 8003d92:	43db      	mvns	r3, r3
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	821a      	strh	r2, [r3, #16]
}
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <TI1_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b087      	sub	sp, #28
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	8179      	strh	r1, [r7, #10]
 8003dae:	813a      	strh	r2, [r7, #8]
 8003db0:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 8003db2:	2300      	movs	r3, #0
 8003db4:	82fb      	strh	r3, [r7, #22]
 8003db6:	2300      	movs	r3, #0
 8003db8:	82bb      	strh	r3, [r7, #20]
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8c1b      	ldrh	r3, [r3, #32]
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	f023 0301 	bic.w	r3, r3, #1
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8b1b      	ldrh	r3, [r3, #24]
 8003dce:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8c1b      	ldrh	r3, [r3, #32]
 8003dd4:	82bb      	strh	r3, [r7, #20]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 8003dd6:	8afb      	ldrh	r3, [r7, #22]
 8003dd8:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8003ddc:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8003dde:	88fb      	ldrh	r3, [r7, #6]
 8003de0:	011b      	lsls	r3, r3, #4
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	893b      	ldrh	r3, [r7, #8]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	8afb      	ldrh	r3, [r7, #22]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	82fb      	strh	r3, [r7, #22]
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P));
 8003df0:	8abb      	ldrh	r3, [r7, #20]
 8003df2:	f023 0302 	bic.w	r3, r3, #2
 8003df6:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8003df8:	897a      	ldrh	r2, [r7, #10]
 8003dfa:	8abb      	ldrh	r3, [r7, #20]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	f043 0301 	orr.w	r3, r3, #1
 8003e04:	82bb      	strh	r3, [r7, #20]
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8afa      	ldrh	r2, [r7, #22]
 8003e0a:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	8aba      	ldrh	r2, [r7, #20]
 8003e10:	841a      	strh	r2, [r3, #32]
}
 8003e12:	371c      	adds	r7, #28
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <TI2_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b087      	sub	sp, #28
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	8179      	strh	r1, [r7, #10]
 8003e26:	813a      	strh	r2, [r7, #8]
 8003e28:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	82fb      	strh	r3, [r7, #22]
 8003e2e:	2300      	movs	r3, #0
 8003e30:	82bb      	strh	r3, [r7, #20]
 8003e32:	2300      	movs	r3, #0
 8003e34:	827b      	strh	r3, [r7, #18]
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	8c1b      	ldrh	r3, [r3, #32]
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	f023 0310 	bic.w	r3, r3, #16
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	8b1b      	ldrh	r3, [r3, #24]
 8003e4a:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8c1b      	ldrh	r3, [r3, #32]
 8003e50:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 8003e52:	897b      	ldrh	r3, [r7, #10]
 8003e54:	011b      	lsls	r3, r3, #4
 8003e56:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 8003e58:	8afb      	ldrh	r3, [r7, #22]
 8003e5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e5e:	051b      	lsls	r3, r3, #20
 8003e60:	0d1b      	lsrs	r3, r3, #20
 8003e62:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8003e64:	88fb      	ldrh	r3, [r7, #6]
 8003e66:	031b      	lsls	r3, r3, #12
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	8afb      	ldrh	r3, [r7, #22]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8003e70:	893b      	ldrh	r3, [r7, #8]
 8003e72:	021b      	lsls	r3, r3, #8
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	8afb      	ldrh	r3, [r7, #22]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	82fb      	strh	r3, [r7, #22]
  /* Select the Polarity and set the CC2E Bit */
   tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P));
 8003e7c:	8abb      	ldrh	r3, [r7, #20]
 8003e7e:	f023 0320 	bic.w	r3, r3, #32
 8003e82:	82bb      	strh	r3, [r7, #20]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8003e84:	8a7a      	ldrh	r2, [r7, #18]
 8003e86:	8abb      	ldrh	r3, [r7, #20]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	f043 0310 	orr.w	r3, r3, #16
 8003e90:	82bb      	strh	r3, [r7, #20]
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	8afa      	ldrh	r2, [r7, #22]
 8003e96:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8aba      	ldrh	r2, [r7, #20]
 8003e9c:	841a      	strh	r2, [r3, #32]
}
 8003e9e:	371c      	adds	r7, #28
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <TI3_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b087      	sub	sp, #28
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	8179      	strh	r1, [r7, #10]
 8003eb2:	813a      	strh	r2, [r7, #8]
 8003eb4:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	82fb      	strh	r3, [r7, #22]
 8003eba:	2300      	movs	r3, #0
 8003ebc:	82bb      	strh	r3, [r7, #20]
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	827b      	strh	r3, [r7, #18]
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8c1b      	ldrh	r3, [r3, #32]
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8b9b      	ldrh	r3, [r3, #28]
 8003ed6:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8c1b      	ldrh	r3, [r3, #32]
 8003edc:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 8003ede:	897b      	ldrh	r3, [r7, #10]
 8003ee0:	021b      	lsls	r3, r3, #8
 8003ee2:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
 8003ee4:	8afb      	ldrh	r3, [r7, #22]
 8003ee6:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8003eea:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8003eec:	88fb      	ldrh	r3, [r7, #6]
 8003eee:	011b      	lsls	r3, r3, #4
 8003ef0:	b29a      	uxth	r2, r3
 8003ef2:	893b      	ldrh	r3, [r7, #8]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	8afb      	ldrh	r3, [r7, #22]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	82fb      	strh	r3, [r7, #22]
  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P));
 8003efe:	8abb      	ldrh	r3, [r7, #20]
 8003f00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f04:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8003f06:	8a7a      	ldrh	r2, [r7, #18]
 8003f08:	8abb      	ldrh	r3, [r7, #20]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f12:	82bb      	strh	r3, [r7, #20]
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8afa      	ldrh	r2, [r7, #22]
 8003f18:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8aba      	ldrh	r2, [r7, #20]
 8003f1e:	841a      	strh	r2, [r3, #32]
}
 8003f20:	371c      	adds	r7, #28
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop

08003f2c <TI4_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b087      	sub	sp, #28
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	8179      	strh	r1, [r7, #10]
 8003f36:	813a      	strh	r2, [r7, #8]
 8003f38:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	82fb      	strh	r3, [r7, #22]
 8003f3e:	2300      	movs	r3, #0
 8003f40:	82bb      	strh	r3, [r7, #20]
 8003f42:	2300      	movs	r3, #0
 8003f44:	827b      	strh	r3, [r7, #18]

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	8c1b      	ldrh	r3, [r3, #32]
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8b9b      	ldrh	r3, [r3, #28]
 8003f5a:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8c1b      	ldrh	r3, [r3, #32]
 8003f60:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 8003f62:	897b      	ldrh	r3, [r7, #10]
 8003f64:	031b      	lsls	r3, r3, #12
 8003f66:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 8003f68:	8afb      	ldrh	r3, [r7, #22]
 8003f6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f6e:	051b      	lsls	r3, r3, #20
 8003f70:	0d1b      	lsrs	r3, r3, #20
 8003f72:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8003f74:	893b      	ldrh	r3, [r7, #8]
 8003f76:	021b      	lsls	r3, r3, #8
 8003f78:	b29a      	uxth	r2, r3
 8003f7a:	8afb      	ldrh	r3, [r7, #22]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8003f80:	88fb      	ldrh	r3, [r7, #6]
 8003f82:	031b      	lsls	r3, r3, #12
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	8afb      	ldrh	r3, [r7, #22]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P));
 8003f8c:	8abb      	ldrh	r3, [r7, #20]
 8003f8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f92:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8003f94:	8a7a      	ldrh	r2, [r7, #18]
 8003f96:	8abb      	ldrh	r3, [r7, #20]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003fa0:	82bb      	strh	r3, [r7, #20]
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8afa      	ldrh	r2, [r7, #22]
 8003fa6:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	8aba      	ldrh	r2, [r7, #20]
 8003fac:	841a      	strh	r2, [r3, #32]
}
 8003fae:	371c      	adds	r7, #28
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <USART_DeInit>:
  * @param  USARTx: Select the USART or the UART peripheral. 
  *   This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003fc6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d10a      	bne.n	8003fe4 <USART_DeInit+0x2c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8003fce:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003fd2:	2101      	movs	r1, #1
 8003fd4:	f7fd fc56 	bl	8001884 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8003fd8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003fdc:	2100      	movs	r1, #0
 8003fde:	f7fd fc51 	bl	8001884 <RCC_APB2PeriphResetCmd>
 8003fe2:	e046      	b.n	8004072 <USART_DeInit+0xba>
  }
  else if (USARTx == USART2)
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8003fea:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d10a      	bne.n	8004008 <USART_DeInit+0x50>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8003ff2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003ff6:	2101      	movs	r1, #1
 8003ff8:	f7fd fc6c 	bl	80018d4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8003ffc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004000:	2100      	movs	r1, #0
 8004002:	f7fd fc67 	bl	80018d4 <RCC_APB1PeriphResetCmd>
 8004006:	e034      	b.n	8004072 <USART_DeInit+0xba>
  }
  else if (USARTx == USART3)
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800400e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004012:	429a      	cmp	r2, r3
 8004014:	d10a      	bne.n	800402c <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8004016:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800401a:	2101      	movs	r1, #1
 800401c:	f7fd fc5a 	bl	80018d4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8004020:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8004024:	2100      	movs	r1, #0
 8004026:	f7fd fc55 	bl	80018d4 <RCC_APB1PeriphResetCmd>
 800402a:	e022      	b.n	8004072 <USART_DeInit+0xba>
  }    
  else if (USARTx == UART4)
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 8004032:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004036:	429a      	cmp	r2, r3
 8004038:	d10a      	bne.n	8004050 <USART_DeInit+0x98>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 800403a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800403e:	2101      	movs	r1, #1
 8004040:	f7fd fc48 	bl	80018d4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8004044:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004048:	2100      	movs	r1, #0
 800404a:	f7fd fc43 	bl	80018d4 <RCC_APB1PeriphResetCmd>
 800404e:	e010      	b.n	8004072 <USART_DeInit+0xba>
  }    
  else
  {
    if (USARTx == UART5)
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8004056:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800405a:	429a      	cmp	r2, r3
 800405c:	d109      	bne.n	8004072 <USART_DeInit+0xba>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 800405e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004062:	2101      	movs	r1, #1
 8004064:	f7fd fc36 	bl	80018d4 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8004068:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800406c:	2100      	movs	r1, #0
 800406e:	f7fd fc31 	bl	80018d4 <RCC_APB1PeriphResetCmd>
    }
  }
}
 8004072:	3708      	adds	r7, #8
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *   that contains the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b08c      	sub	sp, #48	; 0x30
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8004082:	2300      	movs	r3, #0
 8004084:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004086:	2300      	movs	r3, #0
 8004088:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 800408a:	2300      	movs	r3, #0
 800408c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 800408e:	2300      	movs	r3, #0
 8004090:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 8004092:	2300      	movs	r3, #0
 8004094:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	8a1b      	ldrh	r3, [r3, #16]
 800409e:	b29b      	uxth	r3, r3
 80040a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 80040a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040a4:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 80040a8:	4013      	ands	r3, r2
 80040aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	88db      	ldrh	r3, [r3, #6]
 80040b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040b2:	4313      	orrs	r3, r2
 80040b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80040b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	899b      	ldrh	r3, [r3, #12]
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 80040c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040c8:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 80040cc:	4013      	ands	r3, r2
 80040ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	889a      	ldrh	r2, [r3, #4]
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	891b      	ldrh	r3, [r3, #8]
 80040d8:	4313      	orrs	r3, r2
 80040da:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80040e0:	4313      	orrs	r3, r2
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040e6:	4313      	orrs	r3, r2
 80040e8:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80040ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	8a9b      	ldrh	r3, [r3, #20]
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 80040fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040fc:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8004100:	4013      	ands	r3, r2
 8004102:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	899b      	ldrh	r3, [r3, #12]
 8004108:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800410a:	4313      	orrs	r3, r2
 800410c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800410e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004110:	b29a      	uxth	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8004116:	f107 0308 	add.w	r3, r7, #8
 800411a:	4618      	mov	r0, r3
 800411c:	f7fd fa62 	bl	80015e4 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 8004120:	69fa      	ldr	r2, [r7, #28]
 8004122:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004126:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800412a:	429a      	cmp	r2, r3
 800412c:	d102      	bne.n	8004134 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	62bb      	str	r3, [r7, #40]	; 0x28
 8004132:	e001      	b.n	8004138 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	899b      	ldrh	r3, [r3, #12]
 800413c:	b29b      	uxth	r3, r3
 800413e:	b29b      	uxth	r3, r3
 8004140:	b21b      	sxth	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	da0c      	bge.n	8004160 <USART_Init+0xe8>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8004146:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004148:	4613      	mov	r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	4413      	add	r3, r2
 800414e:	009a      	lsls	r2, r3, #2
 8004150:	441a      	add	r2, r3
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	005b      	lsls	r3, r3, #1
 8004158:	fbb2 f3f3 	udiv	r3, r2, r3
 800415c:	627b      	str	r3, [r7, #36]	; 0x24
 800415e:	e00b      	b.n	8004178 <USART_Init+0x100>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8004160:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004162:	4613      	mov	r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	4413      	add	r3, r2
 8004168:	009a      	lsls	r2, r3, #2
 800416a:	441a      	add	r2, r3
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	fbb2 f3f3 	udiv	r3, r2, r3
 8004176:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 8004178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800417a:	f248 531f 	movw	r3, #34079	; 0x851f
 800417e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8004182:	fba3 1302 	umull	r1, r3, r3, r2
 8004186:	095b      	lsrs	r3, r3, #5
 8004188:	011b      	lsls	r3, r3, #4
 800418a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800418c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800418e:	091b      	lsrs	r3, r3, #4
 8004190:	2264      	movs	r2, #100	; 0x64
 8004192:	fb02 f303 	mul.w	r3, r2, r3
 8004196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	899b      	ldrh	r3, [r3, #12]
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	b21b      	sxth	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	da10      	bge.n	80041cc <USART_Init+0x154>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80041aa:	6a3b      	ldr	r3, [r7, #32]
 80041ac:	00db      	lsls	r3, r3, #3
 80041ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80041b2:	f248 531f 	movw	r3, #34079	; 0x851f
 80041b6:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 80041ba:	fba3 1302 	umull	r1, r3, r3, r2
 80041be:	095b      	lsrs	r3, r3, #5
 80041c0:	f003 0307 	and.w	r3, r3, #7
 80041c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041c6:	4313      	orrs	r3, r2
 80041c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041ca:	e00f      	b.n	80041ec <USART_Init+0x174>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80041cc:	6a3b      	ldr	r3, [r7, #32]
 80041ce:	011b      	lsls	r3, r3, #4
 80041d0:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80041d4:	f248 531f 	movw	r3, #34079	; 0x851f
 80041d8:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 80041dc:	fba3 1302 	umull	r1, r3, r3, r2
 80041e0:	095b      	lsrs	r3, r3, #5
 80041e2:	f003 030f 	and.w	r3, r3, #15
 80041e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041e8:	4313      	orrs	r3, r2
 80041ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 80041ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	811a      	strh	r2, [r3, #8]
}
 80041f4:	3730      	adds	r7, #48	; 0x30
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop

080041fc <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *   which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800420a:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	220c      	movs	r2, #12
 8004222:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	819a      	strh	r2, [r3, #12]
}
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <USART_ClockInit>:
  *   USART peripheral.  
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8004234:	b480      	push	{r7}
 8004236:	b085      	sub	sp, #20
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
 800423e:	2300      	movs	r3, #0
 8004240:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	8a1b      	ldrh	r3, [r3, #16]
 8004246:	b29b      	uxth	r3, r3
 8004248:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
 8004250:	4013      	ands	r3, r2
 8004252:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	881a      	ldrh	r2, [r3, #0]
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 800425c:	4313      	orrs	r3, r2
 800425e:	b29a      	uxth	r2, r3
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	889b      	ldrh	r3, [r3, #4]
 8004264:	4313      	orrs	r3, r2
 8004266:	b29a      	uxth	r2, r3
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	88db      	ldrh	r3, [r3, #6]
 800426c:	4313      	orrs	r3, r2
 800426e:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	4313      	orrs	r3, r2
 8004274:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	b29a      	uxth	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	821a      	strh	r2, [r3, #16]
}
 800427e:	3714      	adds	r7, #20
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *   structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	80da      	strh	r2, [r3, #6]
}
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop

080042b4 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	460b      	mov	r3, r1
 80042be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80042c0:	78fb      	ldrb	r3, [r7, #3]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d008      	beq.n	80042d8 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	899b      	ldrh	r3, [r3, #12]
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	819a      	strh	r2, [r3, #12]
 80042d6:	e007      	b.n	80042e8 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	899b      	ldrh	r3, [r3, #12]
 80042dc:	b29b      	uxth	r3, r3
 80042de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	819a      	strh	r2, [r3, #12]
  }
}
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop

080042f4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b087      	sub	sp, #28
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	4613      	mov	r3, r2
 80042fe:	460a      	mov	r2, r1
 8004300:	807a      	strh	r2, [r7, #2]
 8004302:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8004304:	2300      	movs	r3, #0
 8004306:	613b      	str	r3, [r7, #16]
 8004308:	2300      	movs	r3, #0
 800430a:	60fb      	str	r3, [r7, #12]
 800430c:	2300      	movs	r3, #0
 800430e:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8004310:	2300      	movs	r3, #0
 8004312:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8004318:	887b      	ldrh	r3, [r7, #2]
 800431a:	b2db      	uxtb	r3, r3
 800431c:	095b      	lsrs	r3, r3, #5
 800431e:	b2db      	uxtb	r3, r3
 8004320:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
 8004322:	887b      	ldrh	r3, [r7, #2]
 8004324:	f003 031f 	and.w	r3, r3, #31
 8004328:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2201      	movs	r2, #1
 800432e:	fa02 f303 	lsl.w	r3, r2, r3
 8004332:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d103      	bne.n	8004342 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	330c      	adds	r3, #12
 800433e:	617b      	str	r3, [r7, #20]
 8004340:	e009      	b.n	8004356 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	2b02      	cmp	r3, #2
 8004346:	d103      	bne.n	8004350 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	3310      	adds	r3, #16
 800434c:	617b      	str	r3, [r7, #20]
 800434e:	e002      	b.n	8004356 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	3314      	adds	r3, #20
 8004354:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8004356:	787b      	ldrb	r3, [r7, #1]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d006      	beq.n	800436a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	6811      	ldr	r1, [r2, #0]
 8004362:	68ba      	ldr	r2, [r7, #8]
 8004364:	430a      	orrs	r2, r1
 8004366:	601a      	str	r2, [r3, #0]
 8004368:	e006      	b.n	8004378 <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	6811      	ldr	r1, [r2, #0]
 8004370:	68ba      	ldr	r2, [r7, #8]
 8004372:	43d2      	mvns	r2, r2
 8004374:	400a      	ands	r2, r1
 8004376:	601a      	str	r2, [r3, #0]
  }
}
 8004378:	371c      	adds	r7, #28
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop

08004384 <USART_DMACmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The DMA mode is not available for UART5.  
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	4613      	mov	r3, r2
 800438e:	460a      	mov	r2, r1
 8004390:	807a      	strh	r2, [r7, #2]
 8004392:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_1234_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  if (NewState != DISABLE)
 8004394:	787b      	ldrb	r3, [r7, #1]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d008      	beq.n	80043ac <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	8a9b      	ldrh	r3, [r3, #20]
 800439e:	b29a      	uxth	r2, r3
 80043a0:	887b      	ldrh	r3, [r7, #2]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	829a      	strh	r2, [r3, #20]
 80043aa:	e009      	b.n	80043c0 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	8a9b      	ldrh	r3, [r3, #20]
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	887b      	ldrh	r3, [r7, #2]
 80043b4:	43db      	mvns	r3, r3
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	4013      	ands	r3, r2
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	829a      	strh	r2, [r3, #20]
  }
}
 80043c0:	370c      	adds	r7, #12
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop

080043cc <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	460b      	mov	r3, r1
 80043d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	8a1b      	ldrh	r3, [r3, #16]
 80043dc:	b29b      	uxth	r3, r3
 80043de:	f023 030f 	bic.w	r3, r3, #15
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	8a1b      	ldrh	r3, [r3, #16]
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	78fb      	ldrb	r3, [r7, #3]
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	4313      	orrs	r3, r2
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	821a      	strh	r2, [r3, #16]
}
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	460b      	mov	r3, r1
 800440e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= CR1_WAKE_Mask;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	899b      	ldrh	r3, [r3, #12]
 8004414:	b29b      	uxth	r3, r3
 8004416:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800441a:	b29a      	uxth	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	899b      	ldrh	r3, [r3, #12]
 8004424:	b29a      	uxth	r2, r3
 8004426:	887b      	ldrh	r3, [r7, #2]
 8004428:	4313      	orrs	r3, r2
 800442a:	b29a      	uxth	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	819a      	strh	r2, [r3, #12]
}
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop

0800443c <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	460b      	mov	r3, r1
 8004446:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8004448:	78fb      	ldrb	r3, [r7, #3]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d008      	beq.n	8004460 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	899b      	ldrh	r3, [r3, #12]
 8004452:	b29b      	uxth	r3, r3
 8004454:	f043 0302 	orr.w	r3, r3, #2
 8004458:	b29a      	uxth	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	819a      	strh	r2, [r3, #12]
 800445e:	e007      	b.n	8004470 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	899b      	ldrh	r3, [r3, #12]
 8004464:	b29b      	uxth	r3, r3
 8004466:	f023 0302 	bic.w	r3, r3, #2
 800446a:	b29a      	uxth	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	819a      	strh	r2, [r3, #12]
  }
}
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop

0800447c <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	460b      	mov	r3, r1
 8004486:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= CR2_LBDL_Mask;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	8a1b      	ldrh	r3, [r3, #16]
 800448c:	b29b      	uxth	r3, r3
 800448e:	f023 0320 	bic.w	r3, r3, #32
 8004492:	b29a      	uxth	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	8a1b      	ldrh	r3, [r3, #16]
 800449c:	b29a      	uxth	r2, r3
 800449e:	887b      	ldrh	r3, [r7, #2]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	821a      	strh	r2, [r3, #16]
}
 80044a8:	370c      	adds	r7, #12
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop

080044b4 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	460b      	mov	r3, r1
 80044be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80044c0:	78fb      	ldrb	r3, [r7, #3]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d008      	beq.n	80044d8 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	8a1b      	ldrh	r3, [r3, #16]
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	821a      	strh	r2, [r3, #16]
 80044d6:	e007      	b.n	80044e8 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	8a1b      	ldrh	r3, [r3, #16]
 80044dc:	b29b      	uxth	r3, r3
 80044de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	821a      	strh	r2, [r3, #16]
  }
}
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop

080044f4 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	460b      	mov	r3, r1
 80044fe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8004500:	887b      	ldrh	r3, [r7, #2]
 8004502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004506:	b29a      	uxth	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	809a      	strh	r2, [r3, #4]
}
 800450c:	370c      	adds	r7, #12
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop

08004518 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	889b      	ldrh	r3, [r3, #4]
 8004524:	b29b      	uxth	r3, r3
 8004526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800452a:	b29b      	uxth	r3, r3
}
 800452c:	4618      	mov	r0, r3
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	899b      	ldrh	r3, [r3, #12]
 8004544:	b29b      	uxth	r3, r3
 8004546:	f043 0301 	orr.w	r3, r3, #1
 800454a:	b29a      	uxth	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	819a      	strh	r2, [r3, #12]
}
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop

0800455c <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	460b      	mov	r3, r1
 8004566:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	8b1b      	ldrh	r3, [r3, #24]
 800456c:	b29b      	uxth	r3, r3
 800456e:	b2db      	uxtb	r3, r3
 8004570:	b29a      	uxth	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	8b1b      	ldrh	r3, [r3, #24]
 800457a:	b29a      	uxth	r2, r3
 800457c:	78fb      	ldrb	r3, [r7, #3]
 800457e:	b29b      	uxth	r3, r3
 8004580:	021b      	lsls	r3, r3, #8
 8004582:	b29b      	uxth	r3, r3
 8004584:	4313      	orrs	r3, r2
 8004586:	b29a      	uxth	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	831a      	strh	r2, [r3, #24]
}
 800458c:	370c      	adds	r7, #12
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop

08004598 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.  
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	460b      	mov	r3, r1
 80045a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	8b1b      	ldrh	r3, [r3, #24]
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	8b1b      	ldrh	r3, [r3, #24]
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	78fb      	ldrb	r3, [r7, #3]
 80045bc:	b29b      	uxth	r3, r3
 80045be:	4313      	orrs	r3, r2
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	831a      	strh	r2, [r3, #24]
}
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.     
  * @note The Smart Card mode is not available for UART4 and UART5. 
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	460b      	mov	r3, r1
 80045da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80045dc:	78fb      	ldrb	r3, [r7, #3]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d008      	beq.n	80045f4 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	8a9b      	ldrh	r3, [r3, #20]
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	f043 0320 	orr.w	r3, r3, #32
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	829a      	strh	r2, [r3, #20]
 80045f2:	e007      	b.n	8004604 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	8a9b      	ldrh	r3, [r3, #20]
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	f023 0320 	bic.w	r3, r3, #32
 80045fe:	b29a      	uxth	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	829a      	strh	r2, [r3, #20]
  }
}
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop

08004610 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.  
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	460b      	mov	r3, r1
 800461a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800461c:	78fb      	ldrb	r3, [r7, #3]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d008      	beq.n	8004634 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	8a9b      	ldrh	r3, [r3, #20]
 8004626:	b29b      	uxth	r3, r3
 8004628:	f043 0310 	orr.w	r3, r3, #16
 800462c:	b29a      	uxth	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	829a      	strh	r2, [r3, #20]
 8004632:	e007      	b.n	8004644 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	8a9b      	ldrh	r3, [r3, #20]
 8004638:	b29b      	uxth	r3, r3
 800463a:	f023 0310 	bic.w	r3, r3, #16
 800463e:	b29a      	uxth	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	829a      	strh	r2, [r3, #20]
  }
}
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop

08004650 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	460b      	mov	r3, r1
 800465a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800465c:	78fb      	ldrb	r3, [r7, #3]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d008      	beq.n	8004674 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	8a9b      	ldrh	r3, [r3, #20]
 8004666:	b29b      	uxth	r3, r3
 8004668:	f043 0308 	orr.w	r3, r3, #8
 800466c:	b29a      	uxth	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	829a      	strh	r2, [r3, #20]
 8004672:	e007      	b.n	8004684 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	8a9b      	ldrh	r3, [r3, #20]
 8004678:	b29b      	uxth	r3, r3
 800467a:	f023 0308 	bic.w	r3, r3, #8
 800467e:	b29a      	uxth	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	829a      	strh	r2, [r3, #20]
  }
}
 8004684:	370c      	adds	r7, #12
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop

08004690 <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.   
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	460b      	mov	r3, r1
 800469a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800469c:	78fb      	ldrb	r3, [r7, #3]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00a      	beq.n	80046b8 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	899b      	ldrh	r3, [r3, #12]
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	819a      	strh	r2, [r3, #12]
 80046b6:	e007      	b.n	80046c8 <USART_OverSampling8Cmd+0x38>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	899b      	ldrh	r3, [r3, #12]
 80046bc:	b29b      	uxth	r3, r3
 80046be:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80046c2:	b29a      	uxth	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	819a      	strh	r2, [r3, #12]
  }
}
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop

080046d4 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling methode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	460b      	mov	r3, r1
 80046de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80046e0:	78fb      	ldrb	r3, [r7, #3]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d008      	beq.n	80046f8 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	8a9b      	ldrh	r3, [r3, #20]
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	829a      	strh	r2, [r3, #20]
 80046f6:	e007      	b.n	8004708 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	8a9b      	ldrh	r3, [r3, #20]
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004702:	b29a      	uxth	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	829a      	strh	r2, [r3, #20]
  }
}
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop

08004714 <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	460b      	mov	r3, r1
 800471e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= CR3_IRLP_Mask;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	8a9b      	ldrh	r3, [r3, #20]
 8004724:	b29b      	uxth	r3, r3
 8004726:	f023 0304 	bic.w	r3, r3, #4
 800472a:	b29a      	uxth	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	8a9b      	ldrh	r3, [r3, #20]
 8004734:	b29a      	uxth	r2, r3
 8004736:	887b      	ldrh	r3, [r7, #2]
 8004738:	4313      	orrs	r3, r2
 800473a:	b29a      	uxth	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	829a      	strh	r2, [r3, #20]
}
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop

0800474c <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	460b      	mov	r3, r1
 8004756:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8004758:	78fb      	ldrb	r3, [r7, #3]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d008      	beq.n	8004770 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	8a9b      	ldrh	r3, [r3, #20]
 8004762:	b29b      	uxth	r3, r3
 8004764:	f043 0302 	orr.w	r3, r3, #2
 8004768:	b29a      	uxth	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	829a      	strh	r2, [r3, #20]
 800476e:	e007      	b.n	8004780 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	8a9b      	ldrh	r3, [r3, #20]
 8004774:	b29b      	uxth	r3, r3
 8004776:	f023 0302 	bic.w	r3, r3, #2
 800477a:	b29a      	uxth	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	829a      	strh	r2, [r3, #20]
  }
}
 8004780:	370c      	adds	r7, #12
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop

0800478c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	460b      	mov	r3, r1
 8004796:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8004798:	2300      	movs	r3, #0
 800479a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	881b      	ldrh	r3, [r3, #0]
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	887b      	ldrh	r3, [r7, #2]
 80047a4:	4013      	ands	r3, r2
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d002      	beq.n	80047b2 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 80047ac:	2301      	movs	r3, #1
 80047ae:	73fb      	strb	r3, [r7, #15]
 80047b0:	e001      	b.n	80047b6 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 80047b2:	2300      	movs	r3, #0
 80047b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80047b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3714      	adds	r7, #20
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	460b      	mov	r3, r1
 80047ce:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
   
  USARTx->SR = (uint16_t)~USART_FLAG;
 80047d0:	887b      	ldrh	r3, [r7, #2]
 80047d2:	43db      	mvns	r3, r3
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	801a      	strh	r2, [r3, #0]
}
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b087      	sub	sp, #28
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	460b      	mov	r3, r1
 80047ee:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 80047f0:	2300      	movs	r3, #0
 80047f2:	60fb      	str	r3, [r7, #12]
 80047f4:	2300      	movs	r3, #0
 80047f6:	617b      	str	r3, [r7, #20]
 80047f8:	2300      	movs	r3, #0
 80047fa:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 80047fc:	2300      	movs	r3, #0
 80047fe:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8004800:	887b      	ldrh	r3, [r7, #2]
 8004802:	b2db      	uxtb	r3, r3
 8004804:	095b      	lsrs	r3, r3, #5
 8004806:	b2db      	uxtb	r3, r3
 8004808:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
 800480a:	887b      	ldrh	r3, [r7, #2]
 800480c:	f003 031f 	and.w	r3, r3, #31
 8004810:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	2201      	movs	r2, #1
 8004816:	fa02 f303 	lsl.w	r3, r2, r3
 800481a:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d106      	bne.n	8004830 <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	899b      	ldrh	r3, [r3, #12]
 8004826:	b29b      	uxth	r3, r3
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	4013      	ands	r3, r2
 800482c:	617b      	str	r3, [r7, #20]
 800482e:	e00f      	b.n	8004850 <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	2b02      	cmp	r3, #2
 8004834:	d106      	bne.n	8004844 <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	8a1b      	ldrh	r3, [r3, #16]
 800483a:	b29b      	uxth	r3, r3
 800483c:	697a      	ldr	r2, [r7, #20]
 800483e:	4013      	ands	r3, r2
 8004840:	617b      	str	r3, [r7, #20]
 8004842:	e005      	b.n	8004850 <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	8a9b      	ldrh	r3, [r3, #20]
 8004848:	b29b      	uxth	r3, r3
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	4013      	ands	r3, r2
 800484e:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8004850:	887b      	ldrh	r3, [r7, #2]
 8004852:	0a1b      	lsrs	r3, r3, #8
 8004854:	b29b      	uxth	r3, r3
 8004856:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2201      	movs	r2, #1
 800485c:	fa02 f303 	lsl.w	r3, r2, r3
 8004860:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	881b      	ldrh	r3, [r3, #0]
 8004866:	b29b      	uxth	r3, r3
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	4013      	ands	r3, r2
 800486c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d005      	beq.n	8004880 <USART_GetITStatus+0x9c>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d002      	beq.n	8004880 <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
 800487a:	2301      	movs	r3, #1
 800487c:	74fb      	strb	r3, [r7, #19]
 800487e:	e001      	b.n	8004884 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
 8004880:	2300      	movs	r3, #0
 8004882:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8004884:	7cfb      	ldrb	r3, [r7, #19]
}
 8004886:	4618      	mov	r0, r3
 8004888:	371c      	adds	r7, #28
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop

08004894 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	460b      	mov	r3, r1
 800489e:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 80048a0:	2300      	movs	r3, #0
 80048a2:	81fb      	strh	r3, [r7, #14]
 80048a4:	2300      	movs	r3, #0
 80048a6:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  bitpos = USART_IT >> 0x08;
 80048a8:	887b      	ldrh	r3, [r7, #2]
 80048aa:	0a1b      	lsrs	r3, r3, #8
 80048ac:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 80048ae:	89fb      	ldrh	r3, [r7, #14]
 80048b0:	2201      	movs	r2, #1
 80048b2:	fa02 f303 	lsl.w	r3, r2, r3
 80048b6:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 80048b8:	89bb      	ldrh	r3, [r7, #12]
 80048ba:	43db      	mvns	r3, r3
 80048bc:	b29a      	uxth	r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	801a      	strh	r2, [r3, #0]
}
 80048c2:	3714      	adds	r7, #20
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <.LC0>:
 80048cc:	52415355 	.word	0x52415355
 80048d0:	6e492054 	.word	0x6e492054
 80048d4:	61697469 	.word	0x61697469
 80048d8:	657a696c 	.word	0x657a696c
 80048dc:	000a2e64 	.word	0x000a2e64
